<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <!--
    Boldly import all managed targets into the native targets! This is necessary for MC++ support - we want to use
    the selected pieces of managed target functionality without actually duplicating the targets themselves. 
    The native targets file (i.e. this file) will still be the main build driver (at least for now) but we will 
    inject selected managed targets into our dependency chain for things like managed resources and who knows 
    what else in the future.
    -->
    <Import Project="$(WinFxToolsPath)\Microsoft.Common.Targets" />

    <!-- ********************************************************************************************* -->
    <!-- *** Defaults -->
    <!-- ********************************************************************************************* -->
    <!-- If we don't have a trailing slash on OutputPath, add one -->
    <PropertyGroup>
        <OutputPath Condition="!HasTrailingSlash('$(OutputPath)')">$(OutputPath)\</OutputPath>
        <OutputLibPath Condition="!HasTrailingSlash('$(OutputLibPath)')">$(OutputLibPath)\</OutputLibPath>
    </PropertyGroup>

    <PropertyGroup>
        <!-- Clear out TargetPath so attempts to P2P to native projects do not add a reference-->
        <TargetPath></TargetPath>
    </PropertyGroup>

    <PropertyGroup>
        <TargetExt Condition="'$(TargetType)' == 'ZIP'">.zip</TargetExt>
        <TargetExt Condition="'$(TargetType)' == 'LIBRARY'">.lib</TargetExt>
        <TargetExt Condition="'$(TargetType)' == 'PROGRAM'">.exe</TargetExt>
        <TargetExt Condition="'$(TargetType)' == 'DYNLINK'">.dll</TargetExt>
        <TargetExt Condition="'$(TargetType)' == 'DLLFROMIDL'">.dll</TargetExt>
        <TargetExt Condition="'$(CustomTargetExt)' != ''">$(CustomTargetExt)</TargetExt>
    </PropertyGroup>

    <PropertyGroup Condition="'$(SymbolsPriSubDir)' == ''">
        <SymbolsPriSubDir></SymbolsPriSubDir>
        <SymbolsPriSubDir Condition="'$(TargetExt)' == '.exe'">exe</SymbolsPriSubDir>
        <SymbolsPriSubDir Condition="'$(TargetExt)' == '.dll'">dll</SymbolsPriSubDir>
        <SymbolsPriSubDir Condition="'$(TargetExt)' == '.olb'">olb</SymbolsPriSubDir>
    </PropertyGroup>

    <!--
    This is necessary for unifying the managed and native targets. Devdiv common targets expect AssemblyName to be set,
    whereas the equivalent property used in native targets is OutputName. Microsoft.Common.targets will set AssemblyName
    for us, but it defaults to the project name which may not be what we want.
    -->
    <PropertyGroup>
        <AssemblyName Condition="'$(OutputName)' != ''">$(OutputName)</AssemblyName>
    </PropertyGroup>

    <!-- ********************************************************************************************* -->
    <!-- *** BuildDependsOn -->
    <!-- *** Defines the native-specific build steps -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <!-- Top Level Dependencies -->
        <BuildDependsOn Condition="'$(BuildExePass)' == ''">
           BuildGenerated;
           BuildCompiled;
           BuildLinked;
        </BuildDependsOn>
        <BuildDependsOn Condition="'$(BuildExePass)' == '0'">
           BuildGenerated;
        </BuildDependsOn>
        <BuildDependsOn Condition="'$(BuildExePass)' == '1'">
           BuildCompiled;
        </BuildDependsOn>   
        <BuildDependsOn Condition="'$(BuildExePass)' == '2'">
           BuildLinked;
        </BuildDependsOn>         

        <RebuildDependsOn>
          Clean;
          $(MSBuildProjectDefaultTargets);
        </RebuildDependsOn>

    </PropertyGroup>
    <!-- ********************************************************************************************* -->

    <!--
    Import the common piece of functionality shared between Microsoft.Devdiv.targets (the main managed build driver) and
    Microsoft.Devdiv.Native.targets (this file, the main native/MC++ build driver). This is not the perfect long term 
    solution, but at least a step in the right direction. In time the shared functionality should be extracted from 
    Microsoft.Devdiv.targets into the common file as it is made available for the native targets.
    -->
    <Import Project="Microsoft.DevDiv.Common.Targets"/>

    <!-- ********************************************************************************************* -->
    <!-- *** Tool Option Defaults -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <TargetDefines>$(BuildArchitecture);_X86_</TargetDefines>
    </PropertyGroup>
    <!-- *** MIDL Option Defaults -->
    <PropertyGroup>
        <MidlDefines>$(MidlDefines);$(TargetDefines);_WCHAR_T_DEFINED;__MIDL__=1</MidlDefines>
        <MidlStructMemberAlignment Condition="'$(MidlStructMemberAlignment)' == ''">8</MidlStructMemberAlignment>
        <MidlNoRobust Condition="'$(MidlNoRobust)' == ''">false</MidlNoRobust>
        <MidlCpp>cl</MidlCpp>
        <MkTypLibCompatible>false</MkTypLibCompatible>
        <MidlFlags Condition="'$(BuildArchitecture)'!='armv4'
                          and '$(BuildArchitecture)'!='armv4i'
                          and '$(BuildArchitecture)'!='mipsii'
                          and '$(BuildArchitecture)'!='mipsii_fp'
                          and '$(BuildArchitecture)'!='mipsiv'
                          and '$(BuildArchitecture)'!='mipsiv_fp'
                          and '$(BuildArchitecture)'!='sh4'
                          and '$(MidlNoSal)'!='true'
                          and '$(CETarget)'!='true'">/sal $(MidlFlags)</MidlFlags>
        <MidlTargetEnvironment />
        <MidlTargetEnvironment Condition="'$(ProcessorArchitecture)'=='x86' and '$(BuildArchitecture)' == 'amd64'">x64</MidlTargetEnvironment>
        <MidlTargetEnvironment Condition="'$(ProcessorArchitecture)'=='x86' and '$(BuildArchitecture)' == 'ia64'">ia64</MidlTargetEnvironment>
        <MidlHeaderDir Condition="'$(MidlHeaderDir)' == ''">$(IntermediateOutputPath)</MidlHeaderDir>
        <MidlProxyDir Condition="'$(MidlProxyDir)' == ''">$(IntermediateOutputPath)</MidlProxyDir>
        <MidlInterfaceDir Condition="'$(MidlInterfaceDir)' == ''">$(IntermediateOutputPath)</MidlInterfaceDir>
        <MidlDllDataDir Condition="'$(MidlDllDataDir)' == ''">$(IntermediateOutputPath)</MidlDllDataDir>
        <MidlTlbDir Condition="$(MidlTlbDir) == ''">$(OutputPath)</MidlTlbDir>
        <MidlDllDataFileName Condition="'$(MidlDllDataFileName)' == ''">$(MidlDllDataDir)\dlldata.c</MidlDllDataFileName>
        <MidlIncludePath Condition="'$(MidlIncludePath)' == ''">$(UserIncludes);$(CrtIncPath);$(AtlIncPath);$(SdkIncPath);$(SdkIncInternalPath);$(DevDivSdkIncPath);$(DdkIncPath);$(VSCommonIncPath);$(IntermediateOutputDirectory);</MidlIncludePath>
        <MidlDefaultCharType Condition="'$(MidlDefaultCharType)' == ''">unsigned</MidlDefaultCharType>
        <MidlWarningsAsErrors Condition="'$(MidlWarningsAsErrors)' == '' and ('$(TreatWarningsAsErrors)' == '' or '$(TreatWarningsAsErrors)' == 'true')">true</MidlWarningsAsErrors>
    </PropertyGroup>

    <PropertyGroup>
        <OutputUIPath Condition="'$(OutputUIPath)' ==''">$(OutputPath)$(LCID)</OutputUIPath>
        <CtcIncludes Condition="'$(CtcIncludes)' == ''"></CtcIncludes>
        <PogoDisabled Condition="'$(PogoDisabled)' == ''">false</PogoDisabled>
        <UseMfc Condition="'$(UseMfc)' == ''">false</UseMfc>
        <UseMfcUnicode Condition="'$(UseMfcUnicode)' == ''">false</UseMfcUnicode>
        <ManagedCxx Condition="'$(ManagedCxx)' == ''">false</ManagedCxx>
        <CDefines>$(CDefines);$(UserCDefines)</CDefines>
        <ClAdditionalOptions Condition="'$(REPORT_ICE)' != ''">$(ClAdditionalOptions) /errorreport:send</ClAdditionalOptions>
        <!-- UNDONE DevDiv bugs #137604 : Link command fails with /ERRORREPORT:SEND when invoked from MSBuild -->
        <!-- <LinkAdditionalOptions Condition="'$(REPORT_ICE)' != ''">$(LinkAdditionalOptions) /ERRORREPORT:SEND</LinkAdditionalOptions> -->
    </PropertyGroup>

    <PropertyGroup Condition="'$(ManagedCxx)' == 'true'">
        <GenerateAssemblyAttribute Condition="'$(GenerateAssemblyAttribute)' == ''">true</GenerateAssemblyAttribute>
    </PropertyGroup>

    <PropertyGroup Condition="'$(TargetType)' == 'DLLFROMIDL'">
        <GenerateAssemblyAttribute Condition="'$(GenerateAssemblyAttribute)' == ''">true</GenerateAssemblyAttribute>
        <NoWarn>$(NoWarn);1699</NoWarn>
    </PropertyGroup>

    <!--
    Decide which CRT should be used. This decision is somewhat tortuous, and really you should be
    completely explicit in your leaf project.
    -->
    <Choose>
        <When Condition="'$(UseMfc)' == 'true' or '$(UseMfcUnicode)' == 'true'">
            <PropertyGroup Condition="'$(UseMsvcrt)' == '' and '$(LinkNoLibraries)' == ''">
                <LinkUseCMT Condition="'$(UseStaticMfc)' == 'true'">true</LinkUseCMT>
                <UseCrtDll Condition="'$(UseStaticMfc)' != 'true'">true</UseCrtDll>
            </PropertyGroup>
        </When>
    </Choose>

    <Choose>
        <When Condition="('$(UseCrtDll)' == 'true' or '$(UseMsvcrt)' == 'true') and '$(LinkUseCMT)' != 'true'">
            <PropertyGroup>
                <CrtDllSuffix Condition="'$(UseMsvcrt)' == 'true'">DLL</CrtDllSuffix>
                <LibCLib Condition="'$(LibCLib)' == ''">$(CrtLibPath)\msvcrt$(BuildSuffix).lib</LibCLib>
                <LibCLib Condition="'$(ManagedCxx)' == 'true'">$(LibCLib);$(CrtLibPath)\msvcmrt$(BuildSuffix).lib</LibCLib>
                <LibCLib Condition="'$(UseIOStream)' == 'true' or '$(UseStl)' == 'true'">$(LibCLib);$(CrtLibPath)\msvcprt$(BuildSuffix).lib</LibCLib>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup>
                <LibCLib Condition="'$(AlwaysUseReleaseLibCMT)' != 'true' and '$(LinkNoLibraries)' != 'true'">$(LibCLib);$(CrtLibPath)\libcmt$(BuildSuffix).lib</LibCLib>
                <LibCLib Condition="'$(AlwaysUseReleaseLibCMT)' == 'true' and '$(LinkNoLibraries)' != 'true'">$(LibCLib);$(CrtLibPath)\libcmt.lib</LibCLib>
                <UseCrtDll>false</UseCrtDll>
                <LibCLib Condition="'$(AlwaysUseReleaseLibCMT)' != 'true' and ('$(UseIOStream)' == 'true' or '$(UseStl)' == 'true')">$(LibCLib);$(CrtLibPath)\libcpmt$(BuildSuffix).lib</LibCLib>             
                <LibCLib Condition="'$(AlwaysUseReleaseLibCMT)' == 'true' and ('$(UseIOStream)' == 'true' or '$(UseStl)' == 'true')">$(LibCLib);$(CrtLibPath)\libcpmt.lib</LibCLib>             
            </PropertyGroup>
        </Otherwise>
    </Choose>
    <PropertyGroup Condition="'$(ClRuntimeLibrary)' == '' and ('$(BuildArchitecture)' == 'i386' or '$(BuildArchitecture)' == 'amd64' or '$(BuildArchitecture)' == 'ia64')">
        <ClRuntimeLibrary Condition="'$(ClRuntimeLibrary)' == ''">MultiThreaded</ClRuntimeLibrary>
        <ClRuntimeLibrary Condition="'$(DebugBuild)' == 'true'">MultiThreadedDebug$(CrtDllSuffix)</ClRuntimeLibrary>
        <ClRuntimeLibrary Condition="'$(DebugBuild)' != 'true'">MultiThreaded$(CrtDllSuffix)</ClRuntimeLibrary>
        <!-- Managed C++ doesn't support /MT(d)-->
        <ClRuntimeLibrary Condition="'$(ManagedCxx)' == 'true' and '$(DebugBuild)' == 'true'">MultiThreadedDebugDLL</ClRuntimeLibrary>
        <ClRuntimeLibrary Condition="'$(ManagedCxx)' == 'true' and '$(DebugBuild)' != 'true'">MultiThreadedDLL</ClRuntimeLibrary>
        <ClRuntimeLibrary Condition="'$(LinkNoLibraries)' == 'true'"></ClRuntimeLibrary>
        <ClUndefines Condition="'$(UseMsvcrt)' != 'true' and '$(LinkUseCMT)' != 'true' and '$(ManagedCxx)' != 'true'">$(ClUndefines);_MT</ClUndefines>
    </PropertyGroup>

    <!--
    Architecture specific options
    -->
    <Choose>
        <When Condition="'$(BuildArchitecture)' == 'amd64'">
            <PropertyGroup>
                <CDefines>$(CDefines);_AMD64_;_AMD64_SIMULATOR_;_AMD64_SIMULATOR_PERF_;_AMD64_WORKAROUND_;_WIN64;AMD64;_SKIP_IF_SIMULATOR_</CDefines>
                <ClOmitFramePointers>false</ClOmitFramePointers>
                <ClDetect64BitPortabilityProblems>true</ClDetect64BitPortabilityProblems>
                <ClCallingConvention Condition="'$(ClCallingConvention)' == ''"></ClCallingConvention>
                <MidlIncludePath>$(MidlIncludePath);$(ToolsPath)\$(ToolsArchitecture)\vc\bin</MidlIncludePath>
                <LinkOSVersion Condition="'$(LinkOSVersion)' == ''">5.02</LinkOSVersion>
                <SubsystemWinVer Condition="'$(SubsystemWinVer)' == ''">5.02</SubsystemWinVer>
                <SubsystemConVer Condition="'$(SubsystemConVer)' == ''">5.02</SubsystemConVer>
                <SubsystemNativeVer Condition="'$(SubsystemNativeVer)' == ''">5.02</SubsystemNativeVer>
                <SubsystemCurrentVer Condition="'$(SubsystemCurrentVer)' == ''">5.02</SubsystemCurrentVer>
            </PropertyGroup>
            <PropertyGroup Condition="'$(ManagedCxx)' != 'true'">
                <LinkSafeSeh Condition="'$(LinkSafeSeh)' == ''">false</LinkSafeSeh>
            </PropertyGroup>
        </When>
        <When Condition="'$(BuildArchitecture)' == 'ia64'">
            <PropertyGroup>
                <CDefines>$(CDefines);_IA64_=1;_MERCED_A0_=1;_MSC_EXTENSIONS;_WIN64;IA64=1;NO_HW_DETECT</CDefines>
                <ClOmitFramePointers/>
                <ClAdditionalOptions>$(ClAdditionalOptions) /d2QIPF_fr32</ClAdditionalOptions>
                <ClDetect64BitPortabilityProblems>true</ClDetect64BitPortabilityProblems>
                <ClCallingConvention Condition="'$(ClCallingConvention)' == ''"></ClCallingConvention>
                <Fpo>0</Fpo>
                <ClDefines>$(ClDefines);FPO=$(Fpo)</ClDefines>
                <MidlIncludePath>$(MidlIncludePath);$(ToolsPath)\$(ToolsArchitecture)\vc\bin</MidlIncludePath>
                <LinkOSVersion Condition="'$(LinkOSVersion)' == ''">5.02</LinkOSVersion>
                <SubsystemWinVer Condition="'$(SubsystemWinVer)' == ''">5.02</SubsystemWinVer>
                <SubsystemConVer Condition="'$(SubsystemConVer)' == ''">5.02</SubsystemConVer>
                <SubsystemNativeVer Condition="'$(SubsystemNativeVer)' == ''">5.02</SubsystemNativeVer>
                <SubsystemCurrentVer Condition="'$(SubsystemCurrentVer)' == ''">5.02</SubsystemCurrentVer>
            </PropertyGroup>
            <PropertyGroup Condition="'$(ManagedCxx)' != 'true'">
                <LinkSafeSeh Condition="'$(LinkSafeSeh)' == ''">false</LinkSafeSeh>
            </PropertyGroup>
        </When>
        <When Condition="'$(BuildArchitecture)' == 'i386'">
            <PropertyGroup Condition="'$(FPO)' == ''">
                <Fpo Condition="'$(DebugBuild)' == 'true'">0</Fpo>
                <Fpo Condition="'$(DebugBuild)' != 'true'">1</Fpo>
            </PropertyGroup>
            <PropertyGroup>
                <ClDefines>$(ClDefines);FPO=$(Fpo)</ClDefines>
                <ClOmitFramePointers>false</ClOmitFramePointers>
            </PropertyGroup>
            <PropertyGroup Condition="'$(ManagedCxx)' != 'true'">
                <ClCallingConvention Condition="'$(ClCallingConvention)' == ''">StdCall</ClCallingConvention>
                <LinkSafeSeh Condition="'$(LinkSafeSeh)' == ''">true</LinkSafeSeh>
            </PropertyGroup>
        </When>
        <When Condition="'$(BuildArchitecture)' == 'armv4'">
            <PropertyGroup>
                <ClDefines>$(ClDefines);ARM;_ARM_</ClDefines>
                <ClOmitFramePointers/>
                <ClAdditionalOptions>$(ClAdditionalOptions) /QRarch4</ClAdditionalOptions>
            </PropertyGroup>
        </When>
        <When Condition="'$(BuildArchitecture)' == 'armv4i'">
            <PropertyGroup>
                <ClDefines>$(ClDefines);ARM;_ARM_</ClDefines>
                <ClOmitFramePointers/>
                <ClAdditionalOptions>$(ClAdditionalOptions) /QRarch4t /QRinterwork</ClAdditionalOptions>
            </PropertyGroup>
        </When>
        <When Condition="'$(BuildArchitecture)' == 'mipsii'">
            <PropertyGroup>
                <ClDefines>$(ClDefines);MIPS;_MIPS_</ClDefines>
                <ClOmitFramePointers/>
                <ClAdditionalOptions>$(ClAdditionalOptions) /QMmips2 /QMFPE</ClAdditionalOptions>
            </PropertyGroup>
        </When>
        <When Condition="'$(BuildArchitecture)' == 'mipsii_fp'">
            <PropertyGroup>
                <ClDefines>$(ClDefines);MIPS;_MIPS_</ClDefines>
                <ClOmitFramePointers/>
                <ClAdditionalOptions>$(ClAdditionalOptions) /QMmips2 /QMFPE-</ClAdditionalOptions>
            </PropertyGroup>
        </When>
        <When Condition="'$(BuildArchitecture)' == 'mipsiv'">
            <PropertyGroup>
                <ClDefines>$(ClDefines);MIPS;_MIPS_;_MIPS64</ClDefines>
                <ClOmitFramePointers/>
                <ClAdditionalOptions>$(ClAdditionalOptions) /QMmips4 /QMFPE</ClAdditionalOptions>
            </PropertyGroup>
        </When>
        <When Condition="'$(BuildArchitecture)' == 'mipsiv_fp'">
            <PropertyGroup>
                <ClDefines>$(ClDefines);MIPS;_MIPS_;_MIPS64</ClDefines>
                <ClOmitFramePointers/>
                <ClAdditionalOptions>$(ClAdditionalOptions) /QMmips4 /QMFPE-</ClAdditionalOptions>
            </PropertyGroup>
        </When>
        <When Condition="'$(BuildArchitecture)' == 'sh4'">
            <PropertyGroup>
                <ClDefines>$(ClDefines);SHx;_SHX_;SH4</ClDefines>
                <ClOmitFramePointers/>
                <ClAdditionalOptions>$(ClAdditionalOptions) /Qsh4</ClAdditionalOptions>
            </PropertyGroup>
        </When>
        <!-- this should only be true for CE targets-->
        <When Condition="'$(BuildArchitecture)' == 'x86' and '$(CETarget)'=='true'">
            <PropertyGroup>
                <Fpo Condition="'$(DebugBuild)' == 'true'">0</Fpo>
                <Fpo Condition="'$(DebugBuild)' != 'true'">1</Fpo>
                <ClDefines>$(ClDefines);FPO=$(Fpo)</ClDefines>
                <ClDefines>$(ClDefines);x86;_X86_;UNICODE</ClDefines>
                <ClOmitFramePointers>false</ClOmitFramePointers>
                <LinkSafeSeh Condition="'$(LinkSafeSeh)' == ''">true</LinkSafeSeh>
                <LinkAdditionalOptions>$(LinkAdditionalOptions) /NXCOMPAT</LinkAdditionalOptions>
            </PropertyGroup>
        </When>
    </Choose>
    
    <!-- ********************************************************************************************* -->
    <!-- LTCG and POGO -->
    <!-- ********************************************************************************************* -->
    <Choose>
        <When Condition="'$(BuildExePhase)' == '' and '$(PogoDisabled)' != 'true' and '$(LinkResourceOnlyDll)' != 'true'">
            <Choose>
                <When Condition="'$(PogoInstrument)' == 'true'">
                    <PropertyGroup>
                        <LinkTimeCodeGenerationType>PGINSTRUMENT</LinkTimeCodeGenerationType>
                    </PropertyGroup>
                    <ItemGroup>
                        <LinkAdditionalLibraryDirectories Include="$(CrtLibPath)"/>
                    </ItemGroup>
                </When>
                <When Condition="'$(PogoOptimize)' == 'true'">
                    <PropertyGroup>
                        <LinkTimeCodeGenerationType>PGOPTIMIZE</LinkTimeCodeGenerationType>
                    </PropertyGroup>
                    <ItemGroup>
                        <LinkAdditionalLibraryDirectories Include="$(CrtLibPath)"/>
                    </ItemGroup>
                </When>
                <When Condition="'$(Ltcg)' == 'true'">
                    <PropertyGroup>
                        <ClWholeProgramOptimization Condition="'$(ClWholeProgramOptimization)' == ''">true</ClWholeProgramOptimization>
                        <LibLinkTimeCodeGeneration Condition="'$(LibLinkTimeCodeGeneration)' == ''">true</LibLinkTimeCodeGeneration>
                    </PropertyGroup>
                    <ItemGroup>
                        <ClDisableSpecificWarnings Include="4960;4961;4603;4627"/>
                    </ItemGroup>
                </When>
            </Choose>
            <Choose>
                <When Condition="'$(PogoInstrument)' == 'true' or '$(PogoOptimize)' == 'true'">
                    <PropertyGroup>
                        <ClWholeProgramOptimization Condition="'$(ClWholeProgramOptimization)' == ''">true</ClWholeProgramOptimization>
                        <LibLinkTimeCodeGeneration Condition="'$(LibLinkTimeCodeGeneration)' == ''">true</LibLinkTimeCodeGeneration>
                        <LinkUseDefaultLib Condition="'$(LinkUseDefaultLib)' == ''">true</LinkUseDefaultLib>
                    </PropertyGroup>
                    <ItemGroup>
                        <ClDisableSpecificWarnings Include="4960;4961;4603;4627"/>
                        <LinkIgnoreDefaultLibraryNames Include="msvcrt.lib;msvcprt.lib;comsupp.lib;atls.lib;libcpmt.lib;msvcprt.lib;ole32.lib;shell32.lib;comctl32.lib;urlmon.lib;wininet.lib;shlwapi.lib;libc.lib;oldnames.lib;gdi32.lib;user32.lib;oleacc.lib;gdiplus.lib;uuid.lib;atlmincrt.lib;mfc70.lib;mfcs70.lib;nafxcw.lib;msvcrtd.lib;shlwapip.lib;userenv.lib;ws2_32.lib;mswsock.lib;msimg32.lib;winspool.lib;oledlg.lib"/>
                    </ItemGroup>
                </When>
            </Choose>
        </When>
    </Choose>

    <ItemGroup>
        <ClDisableSpecificWarnings Include="4960;4961;4627;4603"/>
    </ItemGroup>
    
    <!-- ********************************************************************************************* -->    

    <!-- *** CL Option Defaults -->
    <!-- Common CL option defaults -->
    <PropertyGroup Condition="'$(NoBuildTypeDefines)' == ''">
        <CDefines Condition="'$(BuildType)' == 'Debug' and '$(UndefDebug)' != 'true'">$(CDefines);DEBUG</CDefines>
        <CDefines Condition="'$(BuildType)' == 'Debug'">$(CDefines);_DEBUG;DBG;DBG=1</CDefines>
        <!-- The additional check for $(DebugBuild) below is because some vctools don't want to build with /DDEBUG in CHK -->
        <CDefines Condition="'$(BuildType)' == 'Checked' and '$(DebugBuild)' != 'false'">$(CDefines);DEBUG;_DEBUG;DBG;DBG=1</CDefines>
        <CDefines Condition="'$(BuildType)' == 'Retail'">$(CDefines);NDEBUG</CDefines>
        <CDefines Condition="'$(BuildType)' == 'Free'">$(CDefines);NDEBUG</CDefines>
        <CDefines Condition="'$(BuildType)' == 'Data'">$(CDefines);NDEBUG</CDefines>
        <CDefines Condition="'$(BuildType)' == 'Coverage'">$(CDefines);NDEBUG</CDefines>
    </PropertyGroup>
    <PropertyGroup>
        <ClWarningLevel Condition="'$(ClWarningLevel)' == ''">3</ClWarningLevel>
        <ClWarningsAsErrors Condition="'$(ClWarningsAsErrors)' == '' and ('$(TreatWarningsAsErrors)' == '' or '$(TreatWarningsAsErrors)' == 'true')">true</ClWarningsAsErrors>
        <Beta Condition="'$(Beta)' == ''">0</Beta>
        <OfficialBuild Condition="'$(OfficialBuild)' == ''">0</OfficialBuild>
        <DelayLoadVersion Condition="'$(DelayLoadVersion)' == ''">0x0200</DelayLoadVersion>
        <FXBranchSyncCounterValue Condition="'$(FXBranchSyncCounterValue)' == ''">0</FXBranchSyncCounterValue>     
        <CDefines Condition="'$(CrtSecureDeprecate)' != 'true'">$(CDefines);_CRT_SECURE_NO_DEPRECATE</CDefines>
        <CDefines Condition="'$(CrtSecureSclOn)' != 'true'">$(CDefines);_SECURE_SCL=0</CDefines>     
        <CDefines>$(CDefines);_NEW_SDK=1;OFFICIAL_BUILD=$(OfficialBuild);BETA=$(Beta);FX_VER_PRIVATEBUILD_STR=$(COMPUTERNAME);URTBLDENV_FRIENDLY=$(BuildType);FX_BRANCH_SYNC_COUNTER_VALUE=$(FXBranchSyncCounterValue)</CDefines>
        <ConditionHandling Condition="'$(ConditionHandling)' == ''">1</ConditionHandling>
        <NtUp Condition="'$(NtUp)' == ''">1</NtUp>
        <NtInst Condition="'$(NtInst)' == ''">0</NtInst>
        <ClDefines Condition="'$(Win32)' == ''">$(ClDefines);WIN32</ClDefines>
        <ClDefines Condition="'$(ClCallingConvention)' == 'StdCall'">$(ClDefines);STD_CALL</ClDefines>
        <ClDefines Condition="'$(BuildArchitecture)' == 'i386'">$(ClDefines);_X86_=1;i386=1</ClDefines>
        <WinNt Condition="'$(WinNt)' == ''">1</WinNt>
        <Win32Ie Condition="'$(Win32Ie)' == ''">0x0600</Win32Ie>
        <Devl Condition="'$(Devl)' == ''">1</Devl>
        <ClDefines Condition=" '$(NtUp)'=='true' or '$(NtUp)'=='1'">$(ClDefines);NT_UP=1;</ClDefines>
        <!-- Windows SDK Update Vista Beta2: Added _WIN32_WINNT and NTDDI_VERSION set to Windows 2003 SP1 (see MAKEFILE.DEF) to make SDK headers happy-->
        <ClDefines>$(ClDefines);DEVL=$(Devl);_WIN32_WINNT=0x0501;_WIN32_IE=$(Win32Ie);WINNT=$(WinNt);NT_INST=$(NtInst);CONDITION_HANDLING=$(ConditionHandling);__BUILDMACHINE__=$(BuildMachine)</ClDefines>
        <!-- Some projects (example vc7libs) need NTDDI_VERSION to not be defined, in order to let public\sdk\inc\sdkddkver.h to find the right value. -->
        <ClDefines Condition="'$(UndefNTDDI_VERSION)' != 'true'">$(ClDefines);NTDDI_VERSION=0x05020100;</ClDefines>
        <ClDefines Condition="'$(BuildDate)' != ''">$(ClDefines);__BUILDDATE__=$(BuildDate)</ClDefines>
        <ClMinimalRebuildForIDE Condition="'$(ClMinimalRebuildForIDE)' == ''">false</ClMinimalRebuildForIDE>
        <TrackFileAccess Condition="'$(TrackFileAccess)' == ''">true</TrackFileAccess>
        <ClDebugInformationFormat Condition="'$(DebugSymbols)' == 'true' and '$(ClDebugInformationFormat)' == ''">Enabled</ClDebugInformationFormat>
        <CDefines Condition="'$(LinkUseCMT)' == 'true'">$(CDefines);_MT=1</CDefines>
        <PCHRootName Condition="$(PCHRootName) == ''">stdafx</PCHRootName>
        <PCHOutput Condition="'$(PCHOutput)' == ''">$(PCHRootName).pch</PCHOutput>
        <PCHHeader Condition="'$(PCHHeader)' == ''">$(PCHRootName).h</PCHHeader>
        <PCHInjectRefForDebug Condition="'$(PCHCompile)' != ''">$(OutputName)</PCHInjectRefForDebug>
        <PCHCompile Condition="'$(PCHCompile)' == ''">$(PCHRootName).cpp</PCHCompile>
        <PCHObject Condition="'$(PCHObject)' == ''">$(PCHRootName).obj</PCHObject>
        <ClUsePrecompiledHeader Condition="'$(EnableCxxPCHHeaders)' == 'true'">UseUsingSpecific</ClUsePrecompiledHeader>
        <ClCreatePrecompiledHeader Condition="'$(EnableCxxPCHHeaders)' == 'true'">CreateUsingSpecific</ClCreatePrecompiledHeader>
        <ClPathOverride Condition="$(ClPathOverride) == ''">$(Path)</ClPathOverride>
        <ClUseFullPaths Condition="'$(ClUseFullPaths)' == ''">true</ClUseFullPaths>
        <ClIntrinsicFunctions Condition="'$(ClIntrinsicFunctions)' == '' and '$(Optimize)' == 'false'">true</ClIntrinsicFunctions>
        <ClEnforceStandardScoping Condition="'$(ClEnforceStandardScoping)' == ''">false</ClEnforceStandardScoping>
        <ClTreatWChar_tAsBuiltInType Condition="'$(ClTreatWChar_tAsBuiltInType)' == ''">false</ClTreatWChar_tAsBuiltInType>
        <ClWholeProgramOptimization Condition="'$(ClWholeProgramOptimization)' == ''">false</ClWholeProgramOptimization>
        <ClForcedIncludeFiles Condition="'$(ClForcedIncludeFiles)' == ''">$(ClForcedIncludeFiles);$(DevDivSdkIncPath)\warning.h</ClForcedIncludeFiles>
        <ClForcedIncludeFiles Condition="'$(Nonshipping)' == 'true'">$(ClForcedIncludeFiles);$(VSCommonIncPath)\Nonshipping.h</ClForcedIncludeFiles>
        <ClForcedIncludeFiles Condition="'$(BannedApiDeprecate)' == 'true'">$(ClForcedIncludeFiles);ddbanned.h</ClForcedIncludeFiles>          
        <ClOmitDefaultLibraryName Condition="'$(ClOmitDefaultLibraryName)' == ''">true</ClOmitDefaultLibraryName>
        <ClUsingFiles></ClUsingFiles>
        <ClStringPooling Condition="'$(ClStringPooling)' == ''">true</ClStringPooling>
        <ClFunctionLevelLinking Condition="'$(ClFunctionLevelLinking)' == ''">true</ClFunctionLevelLinking>
        <ClStructMemberAlignment Condition="'$(ClStructMemberAlignment)' == ''">8</ClStructMemberAlignment>
        <ClMinimalRebuild Condition="'$(ClMinimalRebuild)' == ''">false</ClMinimalRebuild>
        <CDefines Condition="'$(LinkNoLibraries)' != 'true' and '$(UseMsvcrt)' == 'true' and '$(LinkResourceOnlyDll)' != 'true'">$(CDefines);_DLL=1;_MT=1</CDefines>
    </PropertyGroup>
    <ItemGroup>
       <ClDisableSpecificWarnings Include="4960;4961;4603;4627"/>
    </ItemGroup>

    <!-- Native CL option defaults -->
    <PropertyGroup Condition="'$(ManagedCxx)' != 'true'">
        <ClRuntimeTypeInfo Condition="'$(ClRuntimeTypeInfo)' == ''">false</ClRuntimeTypeInfo>
        <ClBufferSecurityCheck Condition="'$(ClBufferSecurityCheck)' == ''">true</ClBufferSecurityCheck>
    </PropertyGroup>

        <!-- Managed CL option defaults -->
    <PropertyGroup Condition="'$(ManagedCxx)' == 'true'">
        <ClAdditionalUsingDirectories Condition="'$(ClAdditionalUsingDirectories)' == ''">$(SdkRefPath)</ClAdditionalUsingDirectories>
        <CDefineTrace Condition="'$(CDefineTrace)' ==''">true</CDefineTrace>
        <CDefines Condition="'$(DefineTrace)' == 'true'">$(CDefines);TRACE</CDefines>
        <CDefines Condition="'$(DebugBuild)' == 'true'">$(CDefines);_LOGGING;RESOURCE_ANNOTATION_WORK</CDefines>
        <CDefines Condition="'$(DebugBuild)' == 'false'">$(CDefines);RETAIL</CDefines>
        <ClAdditionalOptions>$(ClAdditionalOptions) /d1clr:nostdlib</ClAdditionalOptions>
        <ClBufferSecurityCheck Condition="'$(ClBufferSecurityCheck)' == '' and '$(ManagedCppApplicationType)' == 'mixed'">true</ClBufferSecurityCheck>
    </PropertyGroup>

    <!-- *** ML Option Defaults -->
    <PropertyGroup>
        <Assemble386MasmCompatible Condition="'$(Assemble386MasmCompatible)' == ''">false</Assemble386MasmCompatible>
    </PropertyGroup>

    <!-- *** Lib and Link Option Defaults-->
    <PropertyGroup Condition="'$(LinkLibMachineType)'==''">
        <LinkLibMachineType Condition="'$(BuildArchitecture)' == 'ia64'">ia64</LinkLibMachineType>
        <LinkLibMachineType Condition="'$(BuildArchitecture)' == 'amd64'">x64</LinkLibMachineType>
        <LinkLibMachineType Condition="'$(BuildArchitecture)' == 'i386'">x86</LinkLibMachineType>
        <LinkLibMachineType Condition="'$(BuildArchitecture)' == 'armv4'">ARM</LinkLibMachineType>
        <LinkLibMachineType Condition="'$(BuildArchitecture)' == 'armv4i'">THUMB</LinkLibMachineType>
        <LinkLibMachineType Condition="'$(BuildArchitecture)' == 'mipsii' or '$(BuildArchitecture)' == 'mipsii_fp'">MIPS</LinkLibMachineType>
        <LinkLibMachineType Condition="'$(BuildArchitecture)' == 'mipsiv' or '$(BuildArchitecture)' == 'mipsiv_fp'">MIPSFPU</LinkLibMachineType>
        <LinkLibMachineType Condition="'$(BuildArchitecture)' == 'x86'">x86</LinkLibMachineType>
        <LinkLibMachineType Condition="'$(BuildArchitecture)' == 'sh4'">sh4</LinkLibMachineType>

        <LinkLibIgnore>$(LinkLibIgnore);4070;4221</LinkLibIgnore>
    </PropertyGroup>

    <!-- *** Zip Option Defaults -->
    <PropertyGroup>
        <ZipUsePathInZip Condition="'$(ZipUsePathInZip)' == ''">true</ZipUsePathInZip>
    </PropertyGroup>

    <!-- Following are mandatory flags for the compiler and linker. There are no corresponding msbuild properties yet. -->
    <PropertyGroup>
        <ClAdditionalOptions Condition="'$(BuildArchitecture)' == 'i386'">$(ClAdditionalOptions) /hotpatch</ClAdditionalOptions>
        <LinkAdditionalOptions Condition="'$(CustomTargetExt)' != '.sys' and '$(NoDynamicBase)' == ''">$(LinkAdditionalOptions) /DYNAMICBASE</LinkAdditionalOptions>
        <LinkAdditionalOptions Condition="'$(BuildArchitecture)' == 'i386' or '$(BuildArchitecture)' == 'amd64' or '$(BuildArchitecture)' == 'ia64'">$(LinkAdditionalOptions) /FUNCTIONPADMIN</LinkAdditionalOptions>
        <LinkAdditionalOptions Condition="'$(BuildArchitecture)' == 'i386' and '$(CustomTargetExt)' != '.sys'">$(LinkAdditionalOptions) /NXCOMPAT</LinkAdditionalOptions>
        <RCLinkAdditionalOptions Condition="'$(NoDynamicBase)' == ''">$(RCLinkAdditionalOptions) /DYNAMICBASE</RCLinkAdditionalOptions>
        <RCLinkAdditionalOptions Condition="'$(BuildArchitecture)' == 'i386'">$(RCLinkAdditionalOptions) /NXCOMPAT</RCLinkAdditionalOptions>
    </PropertyGroup>

    <!-- *** RC Option Defaults -->
    <PropertyGroup>
        <RCCulture Condition="'$(RCCulture)' == ''">409</RCCulture>
        <RCIntermediateOutputDirectory Condition="'$(RCIntermediateOutputDirectory)' == ''">$(IntermediateOutputDirectory)</RCIntermediateOutputDirectory>
        <RCIntermediateOutputDirectory Condition="!HasTrailingSlash('$(RCIntermediateOutputDirectory)')">$(RCIntermediateOutputDirectory)\</RCIntermediateOutputDirectory>
        <SxsAssemblyName Condition="'$(SxsAssemblyName)' == ''"></SxsAssemblyName>
        <SxsAssemblyVersion Condition="'$(SxsAssemblyVersion)' == ''"></SxsAssemblyVersion>
        <SxsAssemblyLanguage Condition="'$(SxsAssemblyLanguage)' == ''"></SxsAssemblyLanguage>
        <SxsProcessorArchitecture Condition="'$(SxsProcessorArchitecture)' == ''">$(_BuildArch)</SxsProcessorArchitecture>
        <SxsTarget Condition="'$(SxsTarget)' == ''">$(OutputName)$(TargetExt)</SxsTarget>
        <SystemCompatibleAssemblyName Condition="'$(SystemCompatibleAssemblyName)' == ''">Microsoft.Windows.SystemCompatible</SystemCompatibleAssemblyName>
        <RCFontMap Condition="'$(RCFontMap)' == ''">true</RCFontMap>
        <!-- /z on RC is not documented? -->
        <RCFontMapFlags Condition="'$(RCFontMap)' == 'true'">/z "MS Sans Serif,Helv/MS Shell Dlg"</RCFontMapFlags>
        <SxsManifestDefines>$(SxsManifestDefines);SXS_ASSEMBLY_NAME=$(SxsAssemblyName);SXS_ASSEMBLY_VERSION=$(SxsAssemblyVersion);SXS_ASSEMBLY_LANGUAGE=$(SxsAssemblyLanguage);SXS_PROCESSOR_ARCHITECTURE=$(SxsProcessorArchitecture);SXS_TARGET=$(SxsTarget)</SxsManifestDefines>
        <SxsManifestDefines>$(SxsManifestDefines);SYSTEM_COMPATIBLE_ASSEMBLY_NAME=$(SystemCompatibleAssemblyName);LSYSTEM_COMPATIBLE_ASSEMBLY_NAME=L&quot;$(SystemCompatibleAssemblyName)&quot;</SxsManifestDefines>
        <RCAdditionalOptions>$(RCAdditionalOptions) $(RCFontMapFlags)</RCAdditionalOptions>
        <GenerateUIDll Condition="'$(GenerateUIDll)' == ''">true</GenerateUIDll>
        <OutputUIName Condition="'$(OutputUIName)' == ''">$(OutputName)ui</OutputUIName>
        <OutputUIExt Condition="'$(OutputUIExt)' == ''">.dll</OutputUIExt>
    </PropertyGroup>

    <!-- *** Link Option Defaults -->
    <PropertyGroup>
        <LibMakeLib Condition="'$(LibMakeLib)' == ''">true</LibMakeLib>
        <LinkOutputFile Condition="'$(LinkOutputFile)' == '' and '$(OutputName)' != ''">$(OutputPath)$(OutputName)$(TargetExt)</LinkOutputFile>
        <LinkUseDefaultLib Condition="'$(LinkUseDefaultLib)' == ''">false</LinkUseDefaultLib>
        <LinkManifestName Condition="'$(LinkManifestName)' == '' and '$(OutputName)' != ''">$(OutputPath)$(OutputName)$(TargetExt).mt</LinkManifestName>
        <LinkManifestNameIden Condition="'$(LinkManifestNameIden)' == '' and '$(LinkManifestName)' != ''">$(LinkManifestName).iden</LinkManifestNameIden>
        <LinkResourceOnlyDll Condition="'$(LinkResourceOnlyDll)' == ''">false</LinkResourceOnlyDll>
        <LinkGenerateDebugInformation Condition="'$(DebugLink)' == 'true'">true</LinkGenerateDebugInformation>
        <LinkGenerateDebugInformation Condition="'$(LinkResourceOnlyDll)' == 'true'">false</LinkGenerateDebugInformation>
        <LinkGenerateMapFile Condition="'$(LinkGenerateMapFile)' == ''">false</LinkGenerateMapFile>
        <LinkSpecifyMapFile Condition="'$(LinkSpecifyMapFile)' == ''">true</LinkSpecifyMapFile>
        <LinkMapFileName Condition="'$(LinkGenerateMapFile)' == 'false' or '$(LinkSpecifyMapFile)' == 'false'"/>
        <LinkMapFileName Condition="'$(LinkMapFileName)' == '' and '$(LinkGenerateMapFile)' == 'true' and '$(LinkSpecifyMapFile)' == 'true'">$(OutputPath)$(OutputName).map</LinkMapFileName>
        <GenerateImportLib Condition="'$(GenerateImportLib)' == ''">true</GenerateImportLib>
        <LinkNoLibraries Condition="'$(LinkNoLibraries)' == ''">false</LinkNoLibraries>
        <LinkNoWin32Libraries Condition="'$(LinkNoWin32Libraries)' == ''">false</LinkNoWin32Libraries>
        <AtlLibs Condition="'$(AtlLibs)' == '' and $(UseStaticAtl) == true">$(CrtLibPath)\atls$(BuildSuffix).lib</AtlLibs>
        <AtlLibs Condition="'$(AtlLibs)' == '' and $(UseAtl) == true">$(CrtLibPath)\atls$(BuildSuffix).lib;$(CrtLibPath)\atl.lib</AtlLibs>
        <LinkDelayUnload Condition="'$(LinkDelayUnload)' == ''">false</LinkDelayUnload>
        <LinkMfcLibs Condition="'$(LinkMfcLibs)' == '' and $(UseMfc) == true">$(CrtLibPath)\mfcs90$(BuildSuffix).lib;$(CrtLibPath)\mfc90$(BuildSuffix).lib</LinkMfcLibs>
        <LinkMfcLibs Condition="'$(LinkMfcLibs)' == '' and $(UseMfcUnicode) == true">$(CrtLibPath)\mfcs90u$(BuildSuffix).lib;$(CrtLibPath)\mfc90u$(BuildSuffix).lib</LinkMfcLibs>
        <LinkCrtLibs>$(AtlLibs)</LinkCrtLibs>
        <LinkCrtLibs Condition="'$(LinkResourceOnlyDll)' == 'false'">$(LibCLib);$(LinkCrtLibs)</LinkCrtLibs>
        <Win32DllLibs Condition="'$(LinkDelayLoad)' != ''">$(CrtLibPath)\delayimp.lib;$(Win32DllLibs)</Win32DllLibs>
        <Win32Libs Condition="'$(Win32Libs)' == ''">$(SdkLibPath)\advapi32.lib;$(SdkLibPath)\kernel32.lib</Win32Libs>
        <ClDefines Condition="'$(UseAtl)' == 'true'">$(ClDefines);_ATL_DLL</ClDefines>
        <AtlDisableDeprecated Condition="'$(AtlDisableDeprecated)' == ''">true</AtlDisableDeprecated>
        <ClDefines Condition="'$(AtlDisableDeprecated)' == 'true' and ('$(UseStaticAtl)' == 'true' or $(UseAtl) == 'true')">$(ClDefines);_ATL_DISABLE_DEPRECATED</ClDefines>
        <AtlStaticRegistry Condition="'$(AtlStaticRegistry)' == ''">true</AtlStaticRegistry>
        <ClDefines Condition="'$(AtlStaticRegistry)' == 'true' and '$(UseStaticAtl)' == 'true'">$(ClDefines);_ATL_STATIC_REGISTRY</ClDefines>
        <LinkStackReserve Condition="'$(CustomTargetExt)' != '.sys' and '$(LinkStackReserve)' == ''">0x100000</LinkStackReserve>
        <LinkStackCommit Condition="'$(CustomTargetExt)' != '.sys' and '$(LinkStackCommit)' == '' and $(TargetType) == 'DYNLINK'">0x1000</LinkStackCommit>
        <LinkStackCommit Condition="'$(LinkStackCommit)' == '' and $(TargetType) != 'DYNLINK'">0x2000</LinkStackCommit>
        <LinkIncremental Condition="'$(LinkIncremental)' == ''">false</LinkIncremental>
        <LinkOptimizeReferences Condition="'$(LinkOptimizeReferences)' == '' and '$(Optimize)' == 'true'">true</LinkOptimizeReferences>
        <LinkOptimizeReferences Condition="'$(LinkIncremental)' == 'true'">false</LinkOptimizeReferences>
        <LinkEnableCOMDATFolding Condition="'$(LinkEnableCOMDATFolding)' == '' and '$(Optimize)' == 'true' and '$(LinkIncremental)' != 'true'">true</LinkEnableCOMDATFolding>
        <LinkRelease Condition="'$(LinkRelease)' == '' and '$(LinkIncremental)' != 'true'">true</LinkRelease>
        <LinkRelease Condition="'$(LinkResourceOnlyDll)' == 'true'">false</LinkRelease>
        <LinkAppVersion Condition="'$(LinkAppVersion)' == ''">9.0</LinkAppVersion>
        <LinkTSAware Condition="$(LinkTSAware) == '' and $(TargetType) == 'PROGRAM' and '$(NoDefaultLinkTSAware)'!='true'">true</LinkTSAware>
        <LinkMergeRData Condition="'$(LinkMergeRData)'==''">true</LinkMergeRData>
        <LinkMergePage Condition="'$(LinkMergePage)'==''">true</LinkMergePage>
        <LinkMergeText Condition="'$(LinkMergeText)'==''">true</LinkMergeText>
        <LinkOSVersion Condition="'$(LinkOSVersion)'==''">5.00</LinkOSVersion>        
        <SubsystemWinVer Condition="'$(SubsystemWinVer)' == ''">5.00</SubsystemWinVer>
        <SubsystemConVer Condition="'$(SubsystemConVer)' == ''">5.00</SubsystemConVer>
        <SubsystemNativeVer Condition="'$(SubsystemNativeVer)' == ''">5.00</SubsystemNativeVer>
        <SubsystemCurrentVer Condition="'$(SubsystemCurrentVer)' == ''">5.00</SubsystemCurrentVer>
        <LinkCompressPdbs Condition="'$(LinkCompressPdbs)' == ''">true</LinkCompressPdbs>
    </PropertyGroup>

    <PropertyGroup Condition="'$(ManagedCxx)' == 'true'">
        <ManagedCppApplicationType Condition="'$(ManagedCppApplicationType)' == ''">pure</ManagedCppApplicationType>
    </PropertyGroup>

    <Choose>
        <When Condition="'$(LinkSubSystem)' == '' and '$(TargetType)' == 'DYNLINK' and '$(ManagedCxx)' != 'true'">
            <PropertyGroup>
                <LinkSubSystem>console</LinkSubSystem>
                <Internal_SubsystemVer>$(SubsystemCurrentVer)</Internal_SubsystemVer>
            </PropertyGroup>
        </When>
        <When Condition="'$(LinkSubSystem)' == '' and '$(ManagedCxx)' != 'true'">
            <PropertyGroup>
                <LinkSubSystem>console</LinkSubSystem>
            </PropertyGroup>
        </When>
    </Choose>

    <Choose>
        <When Condition="'$(LinkSubSystem)' == 'console'">
            <PropertyGroup>
                <EntryPoint Condition="'$(EntryPoint)' == 'winmain'">WinMainCRTStartup</EntryPoint>
                <EntryPoint Condition="'$(EntryPoint)' == 'wwinmain'">wWinMainCRTStartup</EntryPoint>
                <EntryPoint Condition="'$(EntryPoint)' == 'wmain'">wmainCRTStartup</EntryPoint>
                <EntryPoint Condition="'$(EntryPoint)' == 'main'">mainCRTStartup</EntryPoint>
                <EntryPoint Condition="'$(EntryPointSymbol)' == '' and '$(EntryPoint)' == '' and '$(DllEntryPoint)'==''">mainCRTStartup</EntryPoint>
                <EntryPoint Condition="'$(EntryPointSymbol)' != ''">$(EntryPointSymbol)</EntryPoint>
                <Win32DllLibs Condition="'$(UseMsvcrt)' == 'true'">$(Win32DllLibs);$(SdkLibPath)\kernel32.lib</Win32DllLibs>
                <Internal_SubsystemVer Condition="'$(Internal_SubsystemVer)' == ''">$(SubsystemConVer)</Internal_SubsystemVer>
            </PropertyGroup>
        </When>
        <When Condition="'$(LinkSubSystem)' == 'windows'">
            <PropertyGroup>
                <EntryPoint Condition="'$(EntryPoint)' == 'winmain'">WinMainCRTStartup</EntryPoint>
                <EntryPoint Condition="'$(EntryPoint)' == 'wwinmain'">wWinMainCRTStartup</EntryPoint>
                <EntryPoint Condition="'$(EntryPoint)' == 'wmain'">wmainCRTStartup</EntryPoint>
                <EntryPoint Condition="'$(EntryPoint)' == 'main'">mainCRTStartup</EntryPoint>
                <EntryPoint Condition="'$(EntryPointSymbol)' == '' and '$(EntryPoint)' == '' and '$(DllEntryPoint)'==''">mainCRTStartup</EntryPoint>
                <EntryPoint Condition="'$(EntryPointSymbol)' != ''">$(EntryPointSymbol)</EntryPoint>
                <Win32DllLibs Condition="'$(UseMsvcrt)' == 'true'">$(Win32DllLibs);$(SdkLibPath)\kernel32.lib</Win32DllLibs>
                <Win32DllLibs>$(Win32DllLibs);$(SdkLibPath)\gdi32.lib</Win32DllLibs>
                <Internal_SubsystemVer Condition="'$(Internal_SubsystemVer)' == ''">$(SubsystemWinVer)</Internal_SubsystemVer>
            </PropertyGroup>
        </When>
        <When Condition="'$(LinkSubSystem)' == 'windowsce'">
            <PropertyGroup>
                <EntryPoint Condition="'$(EntryPoint)' == 'winmain'">WinMainCRTStartup</EntryPoint>
                <Internal_SubsystemVer Condition="'$(Internal_SubsystemVer)' == ''">$(SubsystemWinVer)</Internal_SubsystemVer>
                <LinkTSAware/>
            </PropertyGroup>
        </When>
        <When Condition="'$(LinkSubSystem)' == 'native'">
            <PropertyGroup>
                <Internal_SubsystemVer Condition="'$(Internal_SubsystemVer)' == ''">$(SubsystemNativeVer)</Internal_SubsystemVer>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup>
                <Internal_SubsystemVer Condition="'$(Internal_SubsystemVer)' == ''">$(SubsystemCurrentVer)</Internal_SubsystemVer>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <!-- *** BSCMAKE Option Defaults -->
    <PropertyGroup>
        <BrowserOutput Condition="'$(BrowserOutput)' == ''">$(OutputName).bsc</BrowserOutput>

        <ClCreateSourceBrowserInformation Condition="'$(ClCreateSourceBrowserInformation)' == ''">false</ClCreateSourceBrowserInformation>
        <GenerateBrowserFile Condition="'$(GenerateBrowserFile)' == ''">$(ClCreateSourceBrowserInformation)</GenerateBrowserFile>

        <ClCreateSourceBrowserInformation Condition="'$(BuildBrowse)' == 'no'">false</ClCreateSourceBrowserInformation>
        <GenerateBrowserFile Condition="'$(BuildBrowse)' == 'no' or '$(NoBrowseInfo)' != ''">false</GenerateBrowserFile>

        <ClCreateSourceBrowserInformation Condition="'$(BuildBrowse)' == 'yes'">true</ClCreateSourceBrowserInformation>
        <GenerateBrowserFile Condition="'$(BuildBrowse)' == 'yes' and '$(NoBrowseInfo)' == ''">true</GenerateBrowserFile>
    </PropertyGroup>

    <!-- *** Misc Option Defaults -->
    <PropertyGroup>
        <BinplaceSymbols Condition="$(BinplaceSymbols) == ''">true</BinplaceSymbols>
    </PropertyGroup>

    <!-- TargetType defaults -->
    <PropertyGroup>
        <FXAppType>VFT_UNKNOWN</FXAppType>
    </PropertyGroup>

    <!-- TargetType specific properties -->
    <Choose>
        <When Condition="'$(TargetType)' == 'ZIP'">
            <PropertyGroup>
                <ZipOutput Condition="'$(ZipOutput)' == ''">$(OutputPath)$(OutputName)$(TargetExt)</ZipOutput>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'LIBRARY'">
            <PropertyGroup>
                <ClProgramDataBaseFileName Condition="'$(ClProgramDataBaseFileName)' == '' and '$(ClDebugInformationFormat)' != 'OldStyleInfo'">$(OutputLibPath)$(OutputName).pdb</ClProgramDataBaseFileName>
                <LibOutputFile Condition="'$(LibOutputFile)' == ''">$(OutputName)$(TargetExt)</LibOutputFile>
                <LibOutput Condition="'$(LibOutput)' == ''">$(OutputLibPath)$(LibOutputFile)</LibOutput>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'PROGRAM'">
            <PropertyGroup>
                <FXAppType>VFT_APP</FXAppType>
                <LinkGenerateManifest Condition="'$(LinkGenerateManifest)' == ''">true</LinkGenerateManifest>
                <LinkManifestResourceId Condition="'$(LinkManifestResourceId)' == ''">1</LinkManifestResourceId>
                <LinkGenerateUacManifest Condition="'$(LinkGenerateUacManifest)' == ''">true</LinkGenerateUacManifest>
                <CDefines>$(CDefines);FX_VER_INTERNALNAME_STR=$(OutputName)$(TargetExt)</CDefines>
                <ClDefines Condition="'$(LinkDelayLoad)' != ''">$(ClDefines);DELAYLOAD_VERSION=$(DelayLoadVersion)</ClDefines>
                <SymbolsPriPath Condition="$(SymbolsPriPath) == ''">$(SymbolsPriPathRoot)\$(SymbolsPriSubDir)</SymbolsPriPath>
                <LinkEntryPoint>$(EntryPoint)</LinkEntryPoint>
                <DefaultBaseAddress Condition="'$(DefaultBaseAddress)' == ''">0x00400000</DefaultBaseAddress>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'DYNLINK'">
            <PropertyGroup>
                <FXAppType>VFT_DLL</FXAppType>
                <LibOutputFile Condition="'$(LibOutputFile)' == ''">$(OutputName).lib</LibOutputFile>
                <LibOutput Condition="'$(LibOutput)' == ''">$(OutputLibPath)$(LibOutputFile)</LibOutput>
                <LinkDLL Condition="'$(LinkDLL)' == ''">true</LinkDLL>
                <LinkGenerateManifest Condition="'$(LinkGenerateManifest)' == ''">true</LinkGenerateManifest>
                <LinkManifestResourceId Condition="'$(LinkManifestResourceId)' == ''">2</LinkManifestResourceId>
                <LinkGenerateUacManifest Condition="'$(LinkGenerateUacManifest)' == ''">false</LinkGenerateUacManifest>
                <CDefines>$(CDefines);FX_VER_INTERNALNAME_STR=$(OutputName)$(TargetExt)</CDefines>
                <ClDefines Condition="'$(LinkDelayLoad)' != ''">$(ClDefines);DELAYLOAD_VERSION=$(DelayLoadVersion)</ClDefines>
                <SymbolsPriPath Condition="$(SymbolsPriPath) == ''">$(SymbolsPriPathRoot)\$(SymbolsPriSubDir)</SymbolsPriPath>
                <LinkEntryPoint Condition="'$(BuildArchitecture)' == 'i386'">$(DllEntryPoint)@12</LinkEntryPoint>
                <LinkEntryPoint Condition="'$(DllEntryPoint)' == '' or '$(LinkResourceOnlyDll)' == 'true'"></LinkEntryPoint>
                <DefaultBaseAddress Condition="'$(DefaultBaseAddress)' == ''">0x10000000</DefaultBaseAddress>
            </PropertyGroup>
            <PropertyGroup Condition="'$(ManagedCxx)' == 'true'">
                <LinkAdditionalOptions Condition="'$(ManagedCppApplicationType)' != 'mixed'">$(LinkAdditionalOptions) /noentry</LinkAdditionalOptions>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'COPY'">
            <PropertyGroup>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'PUBLISH'">
            <PropertyGroup>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'DLLFROMIDL'">
            <PropertyGroup>
                <FXAppType>VFT_DLL</FXAppType>
                <CDefines>$(CDefines);FX_VER_INTERNALNAME_STR=$(OutputName)$(TargetExt)</CDefines>
                <DefaultBaseAddress Condition="'$(DefaultBaseAddress)' == ''">0x10000000</DefaultBaseAddress>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup>
                <Internal_InvalidTargetType>true</Internal_InvalidTargetType>
                <LinkGenerateManifest Condition="'$(LinkGenerateManifest)' == ''">false</LinkGenerateManifest>
                <LinkGenerateUacManifest Condition="'$(LinkGenerateUacManifest)' == ''">false</LinkGenerateUacManifest>
                <DefaultBaseAddress Condition="'$(DefaultBaseAddress)' == ''">0x10000000</DefaultBaseAddress>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <Choose>
        <When Condition="'$(MSBuildCleaning)' == 'true'">
            <PropertyGroup>
                <Internal_MinimalRebuildFromTracking>false</Internal_MinimalRebuildFromTracking>
            </PropertyGroup>
        </When>
        <When Condition="$(ClMinimalRebuildForIDE) == 'true' or $(TrackFileAccess) == 'true'">
            <PropertyGroup>
                <Internal_MinimalRebuildFromTracking>true</Internal_MinimalRebuildFromTracking>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup>
                <Internal_MinimalRebuildFromTracking>false</Internal_MinimalRebuildFromTracking>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <PropertyGroup>
        <ClProgramDataBaseFileName Condition="'$(ClProgramDataBaseFileName)' == '' and '$(LinkIncremental)' != 'true' and '$(ClDebugInformationFormat)' != 'OldStyleInfo'">$(OutputPath)$(OutputName).pdb</ClProgramDataBaseFileName>
        <ClProgramDataBaseFileName Condition="'$(ClProgramDataBaseFileName)' == '' and '$(LinkIncremental)' == 'true' and '$(ClDebugInformationFormat)' != 'OldStyleInfo'">$(IntermediateOutputPath)$(OutputName).pdb</ClProgramDataBaseFileName>
        <CDefines Condition="'$(FXAppType)' != 'VFT_UNKNOWN'">$(CDefines);FX_VFT=$(FXAppType)</CDefines>
        <ClDefines>$(ClDefines);$(CDefines)</ClDefines>
        <RCPreprocessorDefinitions>$(RCPreprocessorDefinitions);$(SxsManifestDefines);$(ClDefines)</RCPreprocessorDefinitions>
        <RCPreprocessorDefinitions Condition="'$(UseClr20Version)' == 'true' and '$(TargetType)' == 'DLLFROMIDL'">$(RCPreprocessorDefinitions);USE_CLR20_VERSION=1</RCPreprocessorDefinitions>
        <RCPreprocessorDefinitions Condition="'$(UseVsVersion)' == 'true' and '$(TargetType)' == 'DLLFROMIDL'">$(RCPreprocessorDefinitions);USE_VSVERSION=1</RCPreprocessorDefinitions>
    </PropertyGroup>

    <ItemGroup>
        <Internal_ProgramDataBaseFileName Condition="'$(LinkProgramDataBaseFileName)' != ''" Include="$(LinkProgramDataBaseFileName)" />
        <!-- There are scenarios when the current nativeproj is only linking, relying on compilation performed by other projects. In this case, the project that performs linking should not take any ownership over the cl pdb. -->
        <Internal_ProgramDataBaseFileName Condition="'$(LinkProgramDataBaseFileName)' == '' and '$(OwnClPdb)' != 'false'" Include="$(ClProgramDataBaseFileName)" />
        <Internal_IncrementalDataBaseFileName Include="@(Internal_ProgramDataBaseFileName->'%(RootDir)%(Directory)%(Filename).idb')" 
                                              Condition="$(Internal_MinimalRebuildFromTracking) == 'true'"/>
    </ItemGroup>

    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- Internal flag creation -->
    <!-- ********************************************************************************************* -->

    <PropertyGroup>
        <ClExceptionHandling Condition="'$(ClNativeExceptionHandling)' == 'sync'">sync</ClExceptionHandling>
        <ClExceptionHandling Condition="'$(ClNativeExceptionHandling)' == 'async'">async</ClExceptionHandling>
        <ClExternCNeverThrowsException Condition="'$(ClNativeExceptionHandling)' != '' and '$(ClExternCNeverThrowsException)'==''">true</ClExternCNeverThrowsException>

        <ClUseInjectPrecompiledHeaderReference Condition="'$(ClUseInjectPrecompiledHeaderReference)' == ''">true</ClUseInjectPrecompiledHeaderReference>
        <ClInjectPrecompiledHeaderReference Condition="'$(ClInjectPrecompiledHeaderReference)' == '' and '$(ClUseInjectPrecompiledHeaderReference)' == 'true'">$(OutputName)</ClInjectPrecompiledHeaderReference>
        <ClOptimization Condition="'$(ClOptimization)' == '' and '$(Optimize)' == 'false'">Disabled</ClOptimization>
    </PropertyGroup>

    <Choose>
        <When Condition="('$(DebugBuild)' == 'true' and '$(NoRtc)' != 'true') and '$(ManagedCxx)' != 'true'">
            <PropertyGroup>
                <ClUninitializedVariableCheck Condition="'$(ClUninitializedVariableCheck)' == ''">true</ClUninitializedVariableCheck>
                <ClStackFrameCheck Condition="'$(ClStackFrameCheck)' == ''">true</ClStackFrameCheck>
            </PropertyGroup>
        </When>
        <When Condition="'$(DebugBuild)' == 'false' or '$(Optimize)' == 'true'">
            <PropertyGroup>
                <ClFavorSizeOrSpeed Condition="'$(ClFavorSizeOrSpeed)' == '' and '$(ManagedCxx)' != 'true'">size</ClFavorSizeOrSpeed>
                <ClOptimization Condition="'$(ClOptimization)' == ''">full</ClOptimization>
            </PropertyGroup>
        </When>
    </Choose>

    <PropertyGroup  Condition="'$(ClCreateSourceBrowserInformation)' == 'true'">
        <ClBrowseInformation>AllInfo</ClBrowseInformation>
        <ClBrowseInformationFile>$(IntermediateOutputPath)</ClBrowseInformationFile>
    </PropertyGroup>

    <!-- ********************************************************************************************* -->
    <!-- Convert Property Groups to Items -->
    <!-- ********************************************************************************************* -->
    <ItemGroup>
        <Internal_WarningsNotAsErrors Include="$(WarningsNotAsErrors)"/>
        <Internal_NoWarn Include="$(NoWarn)"/>
    </ItemGroup>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Settings to allow Platform specific assemblies -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup Condition="'$(PlatformSpecificBuild)' == 'true'">
        <PlatformTarget>anycpu</PlatformTarget>
        <PlatformTarget Condition="'$(BuildArchitecture)' == 'ia64'">Itanium</PlatformTarget>
        <PlatformTarget Condition="'$(BuildArchitecture)' == 'amd64'">x64</PlatformTarget>
        <PlatformTarget Condition="'$(BuildArchitecture)' == 'i386'">x86</PlatformTarget>
    </PropertyGroup>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** UpdateLocalProperties Target -->
    <!-- *** The traversal target will pass a blank value of BuildProjectReferences if the property is  -->
    <!-- *** not defined. The default for native projects is "false" and within a target is the only -->
    <!-- *** way to set it. Note that P2P will use the same global properties as the current project.   -->
    <!-- ********************************************************************************************* -->

    <Target Name="UpdateLocalProperties">
        <PropertyGroup>
            <BuildProjectReferences Condition="'$(BuildProjectReferences)' == ''">false</BuildProjectReferences>
        </PropertyGroup>
    </Target>

    <!-- ********************************************************************************************* -->
    <!-- *** BuildGenerated Target -->
    <!-- ********************************************************************************************* -->
    <Choose>
        <When Condition="'$(TargetType)' == 'COPY'">
            <PropertyGroup>
                <BuildGeneratedDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForGenerate;
                    CreateProfiles;
                    OverlayProfiles;
                 </BuildGeneratedDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'ZIP'">
            <PropertyGroup>
                <BuildGeneratedDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForGenerate;
                    CppPreprocess;
                    CppPreprocessAndFilter;
                    CreateProfiles;
                    OverlayProfiles;
                    PublishFilesGenerated;
                    PublishGenerated;
                </BuildGeneratedDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'PUBLISH'">
            <PropertyGroup>
                <BuildGeneratedDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForGenerate;
                    CppPreprocess;
                    CppPreprocessAndFilter;
                    CreateProfiles;
                    OverlayProfiles;
                    PublishFilesGenerated;
                    PublishGenerated;
             </BuildGeneratedDependsOn>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup>
                <BuildGeneratedDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForGenerate;
                    MessageCompile;
                    GenerateAssemblyAttributes;
                    CppPreprocess;
                    CppPreprocessAndFilter;
                    CreateProfiles;
                    OverlayProfiles;
                    MIDL;
                    PublishFilesGenerated;
                    PublishGenerated;
                </BuildGeneratedDependsOn>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <Target Name="BuildGeneratedLogStatus"
            Condition="'$(BuildExePass)' == ''">
        <Message Text="$(Internal_BuildStatusPrefix)MSBuild is Generating $(MSBuildProjectFile) $(Internal_PhaseMessage)" />
    </Target>

    <Target Name="BuildGenerated"
           Condition="'$(ShouldBuildProject)' == 'true'"
           DependsOnTargets="PrepareForBuild;BuildGeneratedLogStatus;BeforeBuildGenerated;$(BuildGeneratedDependsOn);AfterBuildGenerated">
        <MSBuild Projects="Tdd\Tdd.nativeproj" Targets="BuildGenerated" Condition="Exists('Tdd\Tdd.nativeproj')"/>
	</Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** BuildCompiled Target -->
    <!-- ********************************************************************************************* -->
    <Choose>
        <When Condition="'$(TargetType)' == 'ZIP'">
            <PropertyGroup>
                <BuildCompiledDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForCompile;
                    PublishFilesCompiled;
                    PublishCompiled;
                </BuildCompiledDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'PUBLISH'">
            <PropertyGroup>
                <BuildCompiledDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForCompile;                
                    MakeConfig;
                    PublishFilesCompiled;
                    PublishCompiled;
                </BuildCompiledDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'LIBRARY'">
            <PropertyGroup>
                <BuildCompiledDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForCompile;
                    MakeConfig;
                    AssembleAssembler;
                    ComputeGeneratedCCompileInputs;
                    CCompile;
                    ClCreatePch;
                    CppCompile;
                    CtcCompile;
                    VSCTCompile;
                    ResourceCompile;
                    ComputeCompiledLibInputs;
                    Lib;
                    PublishFilesCompiled;
                    PublishCompiled;
                </BuildCompiledDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'DYNLINK'">
            <PropertyGroup>
                <BuildCompiledDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForCompile;
                    MakeConfig;
                    AssembleAssembler;
                    PrepareResources;
                    CreateMetaAssembly;
                    TlbCreate;
                    ComputeGeneratedCCompileInputs;
                    CCompile;
                    ClCreatePch;
                    CppCompile;
                    CtcCompile;
                    VSCTCompile;
                    ResourceCompile;
                    ComputeCompiledLibInputs;
                    ImportLib;
                    UIDllResourceCompile;
                    UIDllLink;
                    GetBaseAddress;
                    PublishFilesCompiled;
                    PublishCompiled;
                </BuildCompiledDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'PROGRAM'">
            <PropertyGroup>
                <BuildCompiledDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForCompile;
                    MakeConfig;
                    AssembleAssembler;
                    PrepareResources;
                    CreateMetaAssembly;
                    TlbCreate;
                    ComputeGeneratedCCompileInputs;
                    CCompile;
                    ClCreatePch;
                    CppCompile;
                    CtcCompile;
                    VSCTCompile;
                    ComputeCompiledLibInputs;
                    Lib;
                    ResourceCompile;
                    UIDllResourceCompile;
                    UIDllLink;
                    PublishFilesCompiled;
                    PublishCompiled;
                </BuildCompiledDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'DLLFROMIDL'">
            <PropertyGroup>
                <BuildCompiledDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForCompile;
                    MakeConfig;
                    AssembleAssembler;
                    CreateMetaAssembly;
                    TlbCreate;
                    ComputeGeneratedCCompileInputs;
                    ResourceCompile;
                    ComputeCompiledLibInputs;
                    GenerateIntermediateAssemblyFromAssemblyAttributes;
                    GenerateIntermediateAssemblyFromTlb;
                    DisassembleForTlbAssembly;
                    GenerateAssemblyFromTlb;
                    PublishFilesCompiled;
                    PublishCompiled;
                </BuildCompiledDependsOn>
            </PropertyGroup>
        </When>
        <Otherwise>
            <!-- can we remove this section-->
            <PropertyGroup>
                <BuildCompiledDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForCompile;
                    MakeConfig;
                    AssembleAssembler;
                    PrepareResources;
                    CreateMetaAssembly;
                    TlbCreate;
                    ComputeGeneratedCCompileInputs;
                    CCompile;
                    ClCreatePch;
                    CppCompile;
                    CtcCompile;
                    VSCTCompile;
                    ComputeCompiledLibInputs;
                    Lib;
                    ResourceCompile;
                    UIDllResourceCompile;
                    UIDllLink;
                    PublishFilesCompiled;
                    PublishCompiled;
                </BuildCompiledDependsOn>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <Target Name="BuildCompiledLogStatus"
            Condition="'$(BuildExePass)' == ''">
        <Message Text="$(Internal_BuildStatusPrefix)MSBuild is Compiling $(MSBuildProjectFile) $(Internal_PhaseMessage)" />
    </Target>

    <Target Name="BuildCompiled"
        Condition="'$(ShouldBuildProject)' == 'true'"
        DependsOnTargets="PrepareForBuild;BuildCompiledLogStatus;BeforeBuildCompiled;$(BuildCompiledDependsOn);AfterBuildCompiled">

	<CallTarget Targets="ComputeCompiledLinkInputs" Condition="'$(LinkDuringCompilePass)' == 'true'" />
        <CallTarget Targets="BuildLinked" Condition="'$(LinkDuringCompilePass)' == 'true'" />


        <MSBuild Projects="Tdd\Tdd.nativeproj" Targets="BuildCompiled" Condition="Exists('Tdd\Tdd.nativeproj')"/>
     </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** BuildLinked target -->
    <!-- ********************************************************************************************* -->
    <Choose>
        <When Condition="'$(TargetType)' == 'ZIP'">
            <PropertyGroup>
                <!-- Since ZipFiles has not zipped anything in a previous pass, we can delay cleaning until the actual
                     pass in which the target runs. This allows traversal optimization for leaves that only
                     zip. -->
                <BuildLinkedDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForLink;                
                    CleanZipped;
                    ZipFiles;
                    CopyFilesToBinariesDirectory;
                    CopyArbitraryFiles;
                    PublishFilesLinked;
                    PublishLinked;
                </BuildLinkedDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'COPY'">
            <PropertyGroup>
                <!-- Since Copy has not copied anything in a previous pass, we can delay cleaning until the actual
                     pass in which the target runs. This allows traversal optimization for leaves that only
                     copy. -->
                <BuildLinkedDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForLink;                
                    CleanCopied;
                    CopyFilesToBinariesDirectory;
                    CopyArbitraryFiles;
                    PublishFilesLinked;
                    PublishLinked;
                </BuildLinkedDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'PUBLISH'">
            <PropertyGroup>
                <BuildLinkedDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForLink;
                    PublishFilesLinked;
                    CopyArbitraryFiles;
                    PublishLinked;
                </BuildLinkedDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'LIBRARY'">
            <PropertyGroup>
                <BuildLinkedDependsOn>
                    UpdateLocalProperties;
                    ResolveProjectReferencesForLink;
                    GenerateBrowserInformation;
                    ZipFiles;
                    CopyFilesToBinariesDirectory;
                    CopyArbitraryFiles;
                    PublishFilesLinked;
                    PublishLinked;
                    LogOutputFileForLib;
                </BuildLinkedDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'DYNLINK'">
            <PropertyGroup>
                <BuildLinkedDependsOn>
                    UpdateLocalProperties;
                    PrepareResourceNames;
                    ComputeCompiledLinkInputs;
                    ResolveProjectReferencesForLink;
                    GetBaseAddress;
                    Link;
                    AsmMetaCompare;
                    CreateSatelliteAssemblies;
                    GenerateBrowserInformation;
                    ZipFiles;
                    CopyFilesToBinariesDirectory;
                    CopyToSuiteBin;
                    PlaceSymbols;
                    CopyArbitraryFiles;
                    PublishFilesLinked;
                    PublishLinked;
                    LogOutputFileForLink;
                </BuildLinkedDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'PROGRAM'">
            <PropertyGroup>
                <BuildLinkedDependsOn>
                    UpdateLocalProperties;
                    PrepareResourceNames;
                    ComputeCompiledLinkInputs;
                    ResolveProjectReferencesForLink;
                    GetBaseAddress;
                    ImportLib;
                    Link;
                    AsmMetaCompare;
                    CreateSatelliteAssemblies;
                    GenerateBrowserInformation;
                    ZipFiles;
                    CopyFilesToBinariesDirectory;
                    CopyToSuiteBin;
                    PlaceSymbols;
                    CopyArbitraryFiles;
                    PublishFilesLinked;
                    PublishLinked;
                    LogOutputFileForLink;
                </BuildLinkedDependsOn>
            </PropertyGroup>
        </When>
        <When Condition="'$(TargetType)' == 'DLLFROMIDL'">
            <PropertyGroup>
                <BuildLinkedDependsOn>
                    UpdateLocalProperties;
                    ComputeCompiledLinkInputs;
                    ResolveProjectReferencesForLink;                    
                    AsmMetaCompare;
                    ZipFiles;
                    CopyFilesToBinariesDirectory;
                    CopyArbitraryFiles;
                    PublishFilesLinked;
                    PublishLinked;
                </BuildLinkedDependsOn>
            </PropertyGroup>
        </When>
        <Otherwise>
            <!-- can we remove this section-->
            <PropertyGroup>
                <BuildLinkedDependsOn>
                    UpdateLocalProperties;
                    PrepareResourceNames;
                    ComputeCompiledLinkInputs;
                    ResolveProjectReferencesForLink;                    
                    GetBaseAddress;
                    ImportLib;
                    Link;
                    AsmMetaCompare;
                    CreateSatelliteAssemblies;
                    GenerateBrowserInformation;
                    ZipFiles;
                    CopyFilesToBinariesDirectory;
                    PlaceSymbols;
                    CopyArbitraryFiles;
                    PublishFilesLinked;
                    PublishLinked;
                </BuildLinkedDependsOn>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <Target Name="BuildLinkedLogStatus"
            Condition="'$(BuildExePass)' == ''">
        <Message Text="$(Internal_BuildStatusPrefix)MSBuild is Linking $(MSBuildProjectFile) $(Internal_PhaseMessage)" />
    </Target>

    <Target Name="BuildLinked"
           Condition="'$(ShouldBuildProject)' == 'true'"
           DependsOnTargets="PrepareForBuild;BuildLinkedLogStatus;BeforeBuildLinked;$(BuildLinkedDependsOn);AfterBuildLinked">
        <MSBuild Projects="Tdd\Tdd.nativeproj" Targets="BuildLinked" Condition="Exists('Tdd\Tdd.nativeproj')"/>

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** GetBaseAddress Target Section -->
    <!-- ********************************************************************************************* -->

    <!-- Determine the BaseAddress Lookup File -->
    <PropertyGroup>
        <Internal_DllBaseLookupFile Condition="'$(BuildType)' == 'Debug'">$(InternalPath)\DLLBase\x86\dllbaseD.txt</Internal_DllBaseLookupFile>
        <Internal_DllBaseLookupFile Condition="'$(BuildType)' == 'Checked'">$(InternalPath)\DLLBase\x86\dllbaseC.txt</Internal_DllBaseLookupFile>
        <Internal_DllBaseLookupFile Condition="'$(BuildType)' == 'Free'">$(InternalPath)\DLLBase\x86\dllbaseF.txt</Internal_DllBaseLookupFile>
        <Internal_DllBaseLookupFile Condition="'$(BuildType)' == 'Retail'">$(InternalPath)\DLLBase\x86\dllbaseR.txt</Internal_DllBaseLookupFile>
        <Internal_DllBaseLookupFile Condition="'$(BuildType)' == 'Data'">$(InternalPath)\DLLBase\x86\dllbaseR.txt</Internal_DllBaseLookupFile>
        <Internal_DllBaseLookupFile Condition="'$(BuildType)' == 'Coverage'">$(InternalPath)\DLLBase\x86\dllbaseR.txt</Internal_DllBaseLookupFile>
        <Internal_DllBaseLookupFile Condition="'$(BuildArchitecture)' == 'ia64'">$(DevDivToolsPath)\DLLBase\dllbase64.txt</Internal_DllBaseLookupFile>
        <Internal_DllBaseLookupFile Condition="'$(BuildArchitecture)' == 'amd64'">$(DevDivToolsPath)\DLLBase\dllbase64.txt</Internal_DllBaseLookupFile>
        <Internal_DllBaseLookupFile Condition="$(Coffbase) != ''">$(CoffBaseTxtFile)</Internal_DllBaseLookupFile>
    </PropertyGroup>

    <ItemGroup>
        <Internal_DefaultManifestIdentityFile Include="$(DevDivToolsPath)\default_iden.man" />
    </ItemGroup>
    
    <!-- Unfortunately we need a separate target because currently we can't batch on a target condition, in this case whether the resources have a culture -->    
    <Target Name="_GenerateLinkResourceInputs"> 
        <ItemGroup>
            <Internal_LinkResourceInputs Include="@(EmbeddedResource->'$(IntermediateOutputPath)%(ManifestResourceName).resources')"  
                                       Condition="'%(EmbeddedResource.WithCulture)'=='false' and '%(EmbeddedResource.Type)'=='Resx'"/>

            <Internal_LinkResourceInputs Include="@(EmbeddedResource)"  
                                       Condition="'%(EmbeddedResource.WithCulture)'=='false' and '%(EmbeddedResource.Type)'!='Resx'"/>
        </ItemGroup>
    </Target>

    <!-- Inputs include anything that would trigger Link. Probably this target should be "called" from the start of the Link target instead-->
    <Target Name="GetBaseAddress"
            Inputs="$(MSBuildAllProjects);$(Internal_DllBaseLookupFile);@(Link);@(TargetLib);
                    @(Internal_LinkResourceInputs);
                    @(Internal_LinkAdditionalDependencies);$(LinkModuleDefinitionFile)"
            Outputs="$(LinkOutputFile)"
            DependsOnTargets="$(GetBaseAddressDependsOn);_GenerateLinkResourceInputs">

        <PropertyGroup>
            <Internal_Basename Condition="$(Coffbase) != ''">$(Coffbase)</Internal_Basename>
            <Internal_Basename Condition="$(Coffbase) == ''">$(OutputName)</Internal_Basename>
            <Internal_Basename Condition="$(Basename) != ''">$(Basename)</Internal_Basename>           
        </PropertyGroup>

        <GetBaseAddress BaseAddressFile="$(Internal_DllBaseLookupFile)"
                        BinaryName="$(Internal_Basename)"
                        DefaultBaseAddress="$(DefaultBaseAddress)"
                        ContinueOnError="true"
                        Condition="'$(OutputName)' != ''">
            <Output TaskParameter="BaseAddress"
                    PropertyName="BaseAddress"/>
        </GetBaseAddress>

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** CleanCopied Target Section -->
    <!-- ********************************************************************************************* -->
    <Target Name="CleanCopied"
            Condition="'$(MSBuildCleaning)' == 'true'">
        
        <!-- Files in the destination folder when no filename information is given -->
        <Delete Files="@(CopyFile->'%(DestFolder)\%(RecursiveDir)\%(Filename)%(Extension)')" Condition="'%(CopyFile.DestFilename)' == ''" ContinueOnError="true"/>

        <!-- Files in the destination folder with given filename -->
        <Delete Files="@(CopyFile->'%(DestFolder)\%(RecursiveDir)\%(DestFilename)')" Condition="'%(CopyFile.DestFilename)' != '' and '%(CopyFile.DestFolder)' != '' " ContinueOnError="true"/>

        <!-- Files with the given destination filename -->
        <Delete Files="@(CopyFile->'%(RecursiveDir)\%(DestFilename)')" Condition="'%(CopyFile.DestFilename)' != '' and '%(CopyFile.DestFolder)' == '' " ContinueOnError="true"/>

        <!-- DataFiles -->
        <Delete Files="@(DataFile->'$(OutputPath)\%(SubFolder)\%(Filename)%(Extension)');
                       @(DataFile->'$(RootOutputPath)\%(SubFolder)\%(RecursiveDir)%(Filename)%(Extension)')" ContinueOnError="true"/>
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** CleanZipped Target Section -->
    <!-- ********************************************************************************************* -->
    <Target Name="CleanZipped"
            Condition="'$(MSBuildCleaning)' == 'true'">

        <Delete Files="$(IntermediateOutputPath)$(OutputName)$(TargetExt);$(ZipOutput);
                       $(IntermediateOutputPath)$(OutputName).ziplog" />
        
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** CoreClean Target Section -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <CleanDependsOn>
            BeforeClean;
            CleanCopied;
            CleanZipped;
            CoreClean;
            AfterClean
        </CleanDependsOn>
    </PropertyGroup>
    <Target Name="CoreClean"
            DependsOnTargets="CleanReferencedProjects" >

        <Delete Files="$(IntermediateOutputPath)$(OutputName)$(TargetExt)" Condition="'$(OutputName)' != ''"/>

        <Delete Files="@(Internal_IdlFinal->'%(TypeLibraryName)');       
                      @(Internal_IdlFinal->'%(HeaderFileName)');
                      @(Internal_IdlFinal->'%(ProxyFileName)');
                      @(Internal_IdlFinal->'%(DllDataFileName)');
                      @(Internal_IdlFinal->'%(InterfaceIdentifierFileName)');
                      $(IntermediateOutputPath)$(OutputName)$(TargetExt);       
                      @(CppPreprocess->'%(OutputFile)');       
                      @(CppPreprocessAndFilter->'%(OutputFile)')" ContinueOnError="true"/>
          <!-- There are scenarios when the current nativeproj is only linking, relying on compilation performed by other projects. In this case, the cl pdb should not be cleaned by the project that performs linking, but by the one that performs compilation. -->
          <Delete Condition="'$(OwnClPdb)' != 'false'" Files="$(ClProgramDataBaseFileName)" ContinueOnError="true"/>
          <!-- .map file -->                      
        <Delete Files="$(LinkMapFileName)" Condition="'$(LinkGenerateMapFile)' == 'true' and '$(LinkMapFileName)' != ''" ContinueOnError="true"/>
        <Delete Files="$(OutputPath)$(OutputName).map" Condition="'$(LinkGenerateMapFile)' == 'true' and '$(LinkMapFileName)' == ''" ContinueOnError="true"/>
        
        <!-- .exp file -->
        <ItemGroup>
            <Internal_LibOutputClean Include="$(LibOutput)"/>
        </ItemGroup>
        <Delete Files="@(Internal_LibOutputClean->'%(RootDir)%(Directory)%(Filename).exp')" Condition="'$(GenerateImportLib)' == 'true' and '$(TargetType)' == 'DYNLINK' and '$(DllDef)' != ''" ContinueOnError="true"/>

        <Delete Files="$(LinkManifestNameIden);$(LinkOutputFile);$(LibOutput);$(LinkManifestName)" Condition="'$(TargetType)' != ''" ContinueOnError="true"/>

        <Delete Files="$(OutputPath)$(ManifestFileName)" Condition="'$(TargetType)' != '' and '$(GenerateStandaloneManifest)' == 'true' and '$(ManifestFileName)' != ''" ContinueOnError="true"/>

        <!-- We cannot simply blow away the intermediate folder, because during a clean build,
           CoreClean may run after prebuild, which itself cleans out and populates the objx\asmmeta folder.
           So avoid cleaning the asmmeta folder ourselves. -->
        <ItemGroup>
            <Internal_IntermediateOutputPathFiles Include="$(IntermediateOutputPath)**\*" Exclude="$(IntermediateOutputPath)asmmeta\*"/>
        </ItemGroup>

        <Delete Files="@(Internal_IntermediateOutputPathFiles);@(Clean)" ContinueOnError="true"/>
        <Delete Files="@(Internal_ProgramDataBaseFileName);$(LinkMapFileName)"/>
    </Target>

    <!-- ********************************************************************************************* -->
    <!-- *** Rebuild Target Section -->
    <!-- ********************************************************************************************* -->
    <Target
        Name="Rebuild"
        DependsOnTargets="$(RebuildDependsOn)"/>

    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Copy Target -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <CopyFilesToBinariesDirectoryDependsOn/>
    </PropertyGroup>
    <Target Name="CopyFilesToBinariesDirectory"
            Condition="'@(DataFile)' != '' or '@(IntermediateSatelliteAssembliesWithTargetPath)' != ''"
            DependsOnTargets="$(CopyFilesToBinariesDirectoryDependsOn)">

        <Copy SourceFiles="@(DataFile)" 
              DestinationFolder="$(RootOutputPath)\%(DataFile.SubFolder)\%(DataFile.RecursiveDir)"
              SkipUnchangedFiles="true"
              OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" />
        
        <!-- Copy satellite assemblies. -->
        <Copy
            SourceFiles="@(IntermediateSatelliteAssembliesWithTargetPath)"
            DestinationFiles="@(IntermediateSatelliteAssembliesWithTargetPath->'$(OutDir)%(Culture)\$(TargetName).resources.dll')"
            SkipUnchangedFiles="true"
            OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" />
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Copy Arbitrary Files Target -->
    <!-- ********************************************************************************************* -->
    <Target Name="CopyArbitraryFiles"
            Condition="'@(CopyFile)' != ''"
            DependsOnTargets="$(CopyArbitraryFilesDependsOn)">

        <!-- Copy files to the destination folder when no filename information is given -->
        <Copy SourceFiles="@(CopyFile)"
              DestinationFolder="%(CopyFile.DestFolder)\%(CopyFile.RecursiveDir)"
              SkipUnchangedFiles="true"
              OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" 
              Condition="'%(CopyFile.DestFilename)' == ''"/>

        <!-- Copy files to the destination folder with the given filename -->
        <Copy SourceFiles="@(CopyFile)"
              DestinationFiles="%(CopyFile.DestFolder)\%(CopyFile.RecursiveDir)\%(CopyFile.DestFilename)"
              SkipUnchangedFiles="true"
              OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" 
              Condition="'%(CopyFile.DestFilename)' != '' and '%(CopyFile.DestFolder)' != ''" />

        <!-- Copy files to their new names when no folder information is given -->
        <!-- Since the Copy task can't deal with paths beginning with slash, differentiate on RecursiveDir being null or not -->
        <Copy SourceFiles="@(CopyFile)"
              DestinationFiles="%(CopyFile.RecursiveDir)\%(CopyFile.DestFilename)"
              SkipUnchangedFiles="true"
              OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" 
              Condition="'%(CopyFile.DestFilename)' != '' and '%(CopyFile.DestFolder)' == '' and '%(CopyFile.RecursiveDir)' != ''" />
        <Copy SourceFiles="@(CopyFile)"
              DestinationFiles="%(CopyFile.DestFilename)"
              SkipUnchangedFiles="true"
              Condition="'%(CopyFile.DestFilename)' != '' and '%(CopyFile.DestFolder)' == '' and '%(CopyFile.RecursiveDir)' == ''" />

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!--     Prepare the environment for building. -->
    <!-- ********************************************************************************************* -->
    <Target
        Name="PrepareNativeEnvironment"
        DependsOnTargets="$(PrepareNativeEnvironmentDependsOn)">

        <!--
            Check that our startup environment / options are sane
        -->

        <Error Condition="'$(Internal_InvalidTargetType)' == 'true' and '$(ProjectLanguage)' != 'None'" 
               Text="The TargetType $(TargetType) in the project [$(MSBuildProjectFile)] is not known."/>

        <Error Text="Invalid Exception handling option" 
               Condition="'$(ClNativeExceptionHandling)' != 'async' and '$(ClNativeExceptionHandling)' != 'sync' and '$(ClNativeExceptionHandling)' != 'cpp' and '$(ClNativeExceptionHandling)' != ''" />

        <Error Condition="'$(UseAtl)' == 'true' and '$(UseStaticAtl)' == 'true'"
               Text="UseAtl and UseStaticAtl can't both be set."/>

        <Error Condition="'$(UseMsvcrt)' == 'true' and '$(LinkUseCMT)' == 'true'"
               Text="UseMsvcrt and LinkUseCMT can't both be set." />

        <Error Condition="'$(UseCrtDll)' == 'true' and '$(LinkUseCMT)' == 'true'"
               Text="UseCrtDll and LinkUseCMT can't both be set."/>

        <Error Condition="'$(DebugBuild)' == ''"
               Text="Invalid Build Type [$(_BuildType)] leading to an invalid value for DebugBuild."/>

        <Error Condition="'$(BuildType)' == ''"
               Text="Invalid Build Type [$(_BuildType)]. Valid build types [$(ValidBuildTypes)] may be specified in the environmental variable [_BuildType]" />

        <Error Condition="'$(BuildArchitecture)' == ''"
               Text="Invalid Build Architecture [$(_BuildArch)]. Valid build types [$(SupportedArchitectures)] may be specified in the environmental variable [_BuildArch]" />

        <Error Condition="'$(EntryPoint)' != '' and '$(DllEntryPoint)' != ''"
               Text="Cannot set both EntryPoint and DllEntryPoint."/>

        <!-- BuildArchitecture may have been explicitly specified, so check it-->
        <!-- Note a possible source of confusion: _BuildArch=x86 means BuildArchitecture=i386; BuildArchitecture=x86 means CE build for x86-->
        <Error Condition="'$(BuildArchitecture)'!='amd64' and '$(BuildArchitecture)'!='armv4' and '$(BuildArchitecture)'!='armv4i' and '$(BuildArchitecture)'!='i386' and '$(BuildArchitecture)'!='ia64' and '$(BuildArchitecture)'!='mipsii' and '$(BuildArchitecture)'!='mipsii_fp' and '$(BuildArchitecture)'!='mipsiv' and '$(BuildArchitecture)'!='mipsiv_fp' and '$(BuildArchitecture)'!='sh4' and '$(BuildArchitecture)'!='x86'"
               Text="Invalid Build Architecture '$(BuildArchitecture)'. Valid architectures are amd64,armv4,armv4i,i386,ia64,mipsii,mipsii_fp,mipsiv,mipsiv_fp,sha,x86"/>
    </Target>

    <!-- ********************************************************************************************* -->
    <!--     Prepare for OACR . -->
    <!-- ********************************************************************************************* -->
    <Target Name="PrepareOacr"
        Condition="$(DoOacrBuild) == true"
        DependsOnTargets="$(PrepareOacrDependsOn)" >

      <SetOacrConfig 
          EnlistmentRoot="$(EnlistmentRootPath)"
          DefaultOacrProject="vsroot"
          OacrBuildType="$(OacrBuildType)">
        <Output TaskParameter="OacrProject" PropertyName="OacrProject" />
      </SetOacrConfig>

    </Target>

    <!-- ********************************************************************************************* -->
    
    <!-- ********************************************************************************************* -->
    <!--     Prepare the prerequisites for building. -->
    <!-- ********************************************************************************************* -->

    <PropertyGroup>
        <PrepareForBuildDependsOn>
            $(PrepareForBuildDependsOn);
            BuildOnlySettings;
            PrepareBuildEnvironment;
            PrepareNativeEnvironment;
            PrepareOacr
        </PrepareForBuildDependsOn>
    </PropertyGroup>
    <Target
        Name="PrepareForBuild"
        DependsOnTargets="$(PrepareForBuildDependsOn)"
        >

        <!-- Create the directories for intermediate and final build products. -->

        <MakeDir
              Directories="$(IntermediateOutputPath);
                           $(OutputLibPath);
                           $(RootOutputPath);
                           $(OutputPath);
                           $(MidlHeaderDir);
                           $(MidlProxyDir);
                           $(MidlInterfaceDir);
                           $(MidlDllDataDir);
                           $(MidlTlbDir);
                           $(RCIntermediateOutputDirectory);
                           @(DataFile->'$(RootOutputPath)\%(SubFolder)\%(RecursiveDir)')"
              Condition="'$(ProjectLanguage)' != 'None'"/>

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Publish Targets -->
    <!-- *** These targets are now deprecated; new projects should use the PublishFilesGenerated etc.
         *** targets to move away from complex expressions inside the item spec and replace them with
         *** proper item metadata.                                                                     -->
    <!-- ********************************************************************************************* -->
    <Target Name="PublishGenerated"
            Condition="'@(PublishGenerated)' != ''"
            DependsOnTargets="$(PublishGeneratedDependsOn)">

        <!-- The condition here is unfortunately necessary since some directories in vscommon publish
             too many files for all of them to fit into a single command line. Since other passes don't
             have this problem the condition is only present for PublishGenerated, as it slows down the build -->
        <Exec Command="$(PublishCommand) %(PublishGenerated.Identity)"
              StandardOutputImportance="Normal"        
              Condition="'%(PublishGenerated.Identity)' != ''"/>
    </Target>

    <Target Name="PublishCompiled"
            Condition="'@(PublishCompiled)' != ''"
            DependsOnTargets="$(PublishCompiledDependsOn)">

        <Exec Command="$(PublishCommand) %(PublishCompiled.Identity)"
              StandardOutputImportance="Normal"/>
    </Target>

    <Target Name="PublishLinked"
            Condition="'@(PublishLinked)' != ''"
            DependsOnTargets="$(PublishLinkedDependsOn)">

        <Exec Command="$(PublishCommand) %(PublishLinked.Identity)"
              StandardOutputImportance="Normal"/>
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Message Compilation -->
    <!-- ********************************************************************************************* -->
    <Target Name="MessageCompile"
            DependsOnTargets="$(MessageCompileDependsOn)"
            Inputs="$(MSBuildAllProjects);@(MessageCompile)"
            Outputs="@(MessageCompile->'$(IntermediateOutputPath)%(Filename).rc')"
            Condition="'@(MessageCompile)' != ''">

        <Exec Command="mc -h $(IntermediateOutputRelativePath) -r $(IntermediateOutputRelativePath) $(McAdditionalOptions) %(MessageCompile.Identity)"
              StandardOutputImportance="Normal"/>
    </Target>

    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Idl Compilation -->
    <!-- ********************************************************************************************* -->
    <Target Name="MIDL"
            DependsOnTargets="$(MIDLDependsOn)"
            Condition="'@(Idl)' != ''">

        <ItemGroup>
            <Idl>
                <DllDataFileName Condition="'$(UseIdlBasedDllData)' == 'true' and '%(Idl.DllDataFileName)' == ''">$(MidlDllDataDir)\%(Filename)_dlldata.c</DllDataFileName>
                <DllDataFileName Condition="'$(UseIdlBasedDllData)' != 'true' and '%(Idl.DllDataFileName)' == ''">$(MidlDllDataFileName)</DllDataFileName>
                <HeaderFileName Condition="'%(Idl.HeaderFileName)' == ''">$(MidlHeaderDir)\%(Idl.Filename).h</HeaderFileName>
                <TypeLibraryName Condition="'%(Idl.TypeLibraryName)' == ''">$(MidlTlbDir)\%(Filename).tlb</TypeLibraryName>
                <ProxyFileName Condition="'%(Idl.ProxyFileName)' == ''">$(MidlProxyDir)\%(Filename)_p.c</ProxyFileName>
                <InterfaceIdentifierFileName Condition="'%(Idl.InterfaceIdentifierFileName)' == ''">$(MidlInterfaceDir)\%(Filename)_i.c</InterfaceIdentifierFileName>
            </Idl>
        </ItemGroup>


        <!-- Batch on Identity because Midl takes one input at a time-->
        <MIDL 
            AdditionalIncludeDirectories="$(MidlIncludePath)"
            AdditionalOptions="$(MidlFlags)"
            CPreprocessorBinary="$(MidlCpp)" 
            DefaultCharType="$(MidlDefaultCharType)" 
            DisableAllWarnings="$(MidlDisableAllWarnings)"            
            DllDataFileName="%(Idl.DllDataFileName)"
            EmitTimestamp="false" 
            EnableErrorChecks="true" 
            GenerateTypeLibrary="$(MidlGenerateTypeLibrary)"
            GenerateStublessProxies="true" 
            HeaderFileName="%(Idl.HeaderFileName)"
            InterfaceIdentifierFileName="%(Idl.InterfaceIdentifierFileName)"
            IntermediateDirectory="$(IntermediateOutputDirectory)"
            MinimalRebuildFromTracking="$(Internal_MinimalRebuildFromTracking)" 
            MkTypLibCompatible="$(MkTypLibCompatible)"
            PathOverride="$(TrackerToolPath);$(ClToolPath);$(ClNonOacrToolPath);$(MidlAdditionalPaths);$(Path)"
            PreprocessorDefinitions="$(CDefines);$(MidlDefines)"
            ProxyFileName="%(Idl.ProxyFileName)"
            Source="%(Idl.Identity)"
            StructMemberAlignment="$(MidlStructMemberAlignment)" 
            TargetEnvironment="$(MidlTargetEnvironment)"
            ToolPath="$(MidlToolPath)"
            TrackFileAccess="$(TrackFileAccess)"
            TypeLibraryName="%(Idl.TypeLibraryName)"
            ValidateAllParameters="!$(MidlNoRobust)" 
            WarnAsError="$(MidlWarningsAsErrors)"  
            >

            <Output TaskParameter="HeaderFileName"
                    ItemName="IdlHeader" />

            <Output TaskParameter="TypeLibraryName"
                    ItemName="IdlTypeLibrary"/>

            <Output TaskParameter="InterfaceIdentifierFileName"
                    ItemName="CCompile"
                    Condition="'%(Idl.CompileInterface)' == 'true'"/>

            <Output TaskParameter="ProxyFileName"
                    ItemName="CCompile"
                    Condition="'%(Idl.CompileProxy)' == 'true'"/>

            <Output TaskParameter="DllDataFileName"
                    ItemName="IdlDllData"/>
        </MIDL>

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** CreateManifestResourceNames -->
    <!-- ********************************************************************************************* -->
    <Target Name="CreateManifestResourceNames"
            DependsOnTargets="$(CreateManifestResourceNamesDependsOn)"
            Condition="'@(EmbeddedResource)'!=''">
            
        <PropertyGroup>
            <Internal_ResourcePrefix Condition="'$(RootNamespace)' != ''">$(RootNamespace).</Internal_ResourcePrefix>
        </PropertyGroup>
        
        <ItemGroup>

            <!-- Add ManifestResourceName metadata to EmbeddedResource items.
                 If this is a .resx, GenerateResource will use ManifestResourceName.resources for the name of the .resources file it generates.
                 More importantly, ManifestResourceName will be the name used for the stream in the final assembly, unless it is overridden by a LogicalName metadata.
                 
                 For MC++, the ManifestResourceName is the .resx file name changed to .resources extension if a .resx (eg foo.resources),
                  or just the plain input file name if not a .resx (eg foo.bmp), both prefixed with the root namespace and a period if root namespace is defined.
            -->
            
            <EmbeddedResource>
                <ManifestResourceName Condition="'%(EmbeddedResource.Type)'=='Resx' and '%(EmbeddedResource.ManifestResourceName)'==''">$(Internal_ResourcePrefix)%(EmbeddedResource.Filename)</ManifestResourceName>
                <ManifestResourceName Condition="'%(EmbeddedResource.Type)'!='Resx' and '%(EmbeddedResource.ManifestResourceName)'==''">$(Internal_ResourcePrefix)%(EmbeddedResource.Filename)%(EmbeddedResource.Extension)</ManifestResourceName>
            </EmbeddedResource>
            
        </ItemGroup>      
       
    </Target>

    <PropertyGroup>
        <CreateSatelliteAssembliesDependsOn>
            $(CreateSatelliteAssembliesDependsOn);
            CopyLinkOutputToIntermediateDirectory
        </CreateSatelliteAssembliesDependsOn>
    </PropertyGroup>

    <!-- 
    If we need to create satellite assemblies for resources with culture, we need the template assembly
    to be present in the intermediate folder since that's where the AL task from common targets expects it to be.
    An alternative would be to copy the whole CreateSatelliteAssemblies target into native targets, but that's
    probably worse than just copying the file as necessary. The condition on the CreateSatelliteAssemblies target
    will make sure that we only copy the file when we need to.
    -->
    <Target Name="CopyLinkOutputToIntermediateDirectory"
            Condition="'$(ManagedCxx)' == 'true'" 
            Inputs="$(MSBuildAllProjects);$(LinkOutputFile)"
            Outputs="$(IntermediateOutputPath)$(TargetName)$(TargetExt)">

        <Copy SourceFiles="$(LinkOutputFile)"
              DestinationFiles="$(IntermediateOutputPath)$(TargetName)$(TargetExt)"
              OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" />

    </Target>

    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Assembly Source Generation -->
    <!-- ********************************************************************************************* -->

    <!-- *** GenerateAssembly sources Option Defaults -->
    <PropertyGroup Condition="'$(GenerateAssemblyAttribute)' == 'true' or '$(GenerateAssemblyRefs)' == 'true'">

        <UseVsVersion Condition="'$(UseVsVersion)' == ''">true</UseVsVersion>
        <AssemblyGenerateIncludes Condition="'$(UseVsVersion)' == 'true'">$(UserIncludes);$(ClIncludePaths);$(InternalPath)\VSCommon\inc;$(NdpIncPath);$(VCPublicIncPath);$(SdkIncPath);$(SdkIncInternalPath);$(DevDivSdkIncPath);$(DdkIncPath)</AssemblyGenerateIncludes>
        <!-- Include Path (Note: Order is important in this case) -->
        <AssemblyGenerateIncludes Condition="'$(UseVsVersion)' == 'false'">$(UserIncludes);$(ClIncludePaths);$(NdpIncPath);$(InternalPath)\VSCommon\inc;$(VCPublicIncPath);$(SdkIncPath);$(SdkIncInternalPath);$(DevDivSdkIncPath);$(DdkIncPath)</AssemblyGenerateIncludes>
        
        <AssemblyRefsFileName Condition="'$(AssemblyRefsFileName)' == ''">$(DevDivToolsPath)\AssemblyRefs.mcpp</AssemblyRefsFileName>
    </PropertyGroup>

    <!-- *** GenerateAssemblyAttribute Option Defaults -->
    <PropertyGroup Condition="'$(GenerateAssemblyAttribute)' == 'true' or '$(GenerateAssemblyRefs)' == 'true'">
        <AssemblyAttributeComVisible Condition="'$(AssemblyAttributeComVisible)' == '' and '$(TargetType)' != 'DLLFROMIDL'">false</AssemblyAttributeComVisible>
        <AssemblyAttributeComVisible Condition="'$(AssemblyAttributeComVisible)' == '' and '$(TargetType)' == 'DLLFROMIDL'">true</AssemblyAttributeComVisible>
        <AssemblyAttributeClsCompliant Condition="'$(AssemblyAttributeClsCompliant)' == ''">true</AssemblyAttributeClsCompliant>
        <AssemblyAttributeVersions Condition="'$(AssemblyAttributeVersions)' == ''">true</AssemblyAttributeVersions>
        <SignAssemblyAttribute Condition="'$(SignAssemblyAttribute)' == '' and '$(TargetType)' != 'DLLFROMIDL'">true</SignAssemblyAttribute>
        <SignAssemblyAttribute Condition="'$(SignAssemblyAttribute)' == '' and '$(TargetType)' == 'DLLFROMIDL'">false</SignAssemblyAttribute>
        <AssemblyAttributesDefines>$(ClDefines);ASSEMBLY_ATTRIBUTE_COM_VISIBLE=$(AssemblyAttributeComVisible)</AssemblyAttributesDefines>
        <AssemblyAttributesDefines Condition="'$(AssemblyAttributeClsCompliant)' == 'true'">$(AssemblyAttributesDefines);ASSEMBLY_ATTRIBUTE_CLS_COMPLIANT=1</AssemblyAttributesDefines>
        <AssemblyAttributesDefines Condition="'$(AssemblyAttributeClsCompliant)' == 'false'">$(AssemblyAttributesDefines);ASSEMBLY_ATTRIBUTE_CLS_COMPLIANT=0</AssemblyAttributesDefines>
        <AssemblyAttributesDefines Condition="'$(AssemblyAttributeVersions)' == 'true'">$(AssemblyAttributesDefines);ASSEMBLY_ATTRIBUTE_VERSIONS=1</AssemblyAttributesDefines>
        <AssemblyAttributesDefines Condition="'$(AssemblyAttributeVersions)' == 'false'">$(AssemblyAttributesDefines);ASSEMBLY_ATTRIBUTE_VERSIONS=0</AssemblyAttributesDefines>
        <AssemblyAttributesDefines Condition="'$(SignAssemblyAttribute)' == 'true'" >$(AssemblyAttributesDefines);SIGN_ASSEMBLY=1</AssemblyAttributesDefines>
        <AssemblyAttributesDefines Condition="'$(UseVsVersion)' == 'true'">$(AssemblyAttributesDefines);USE_VSVERSION=1</AssemblyAttributesDefines>
        <AssemblyAttributesDefines Condition="'$(UseClr20Version)' == 'true'">$(AssemblyAttributesDefines);USE_CLR20_VERSION=1</AssemblyAttributesDefines>
        <AssemblyAttributesDefines Condition="'$(AssemblyAttributeComCompatibleSideBySide)' == 'true'">$(AssemblyAttributesDefines);COM_COMPATIBLE_SIDEBYSIDE=1</AssemblyAttributesDefines>
        <AssemblyAttributesDefines Condition="'$(AssemblyAttributeAllowPartiallyTrustedCallers)' == 'true'">$(AssemblyAttributesDefines);ALLOW_PARTIALTRUSTCALLS=1</AssemblyAttributesDefines>
        <!-- Include Path (Note: Order is important in this case) -->
    </PropertyGroup>

    <ItemGroup Condition="'$(GenerateAssemblyRefs)' == 'true'">
        <Internal_AssemblyRefsPreprocess Include="$(AssemblyRefsFileName)">
            <OutputFile>$(IntermediateOutputRelativePath)\AssemblyRefs.cpp</OutputFile>
            <Includes>$(AssemblyGenerateIncludes)</Includes>
            <AdditionalOptions>$(AssemblyRefsAdditionalOptions)</AdditionalOptions>
            <CompileAsCpp>true</CompileAsCpp>
        </Internal_AssemblyRefsPreprocess>
    </ItemGroup>

    <ItemGroup Condition="'$(GenerateAssemblyAttribute)' == 'true'">
        <Internal_AssemblyAttributePreprocess Condition="'$(TargetType)' != 'DLLFROMIDL'" Include="$(DevDivToolsPath)\AssemblyAttributes.cpp">
            <OutputFile>$(IntermediateOutputRelativePath)\AssemblyAttributes.cpp</OutputFile>
            <Includes>$(AssemblyGenerateIncludes)</Includes>
            <AdditionalOptions>$(AssemblyAttributesAdditionalOptions)</AdditionalOptions>
            <CompileAsCpp>true</CompileAsCpp>
        </Internal_AssemblyAttributePreprocess>
        <Internal_AssemblyAttributePreprocess Condition="'$(TargetType)' == 'DLLFROMIDL'" Include="$(DevDivToolsPath)\AssemblyAttributes.cspp">
            <OutputFile>$(IntermediateOutputRelativePath)\AssemblyAttributes.cs</OutputFile>
            <Includes>$(AssemblyGenerateIncludes)</Includes>
            <Defines>CSC_INVOKED=1;PPTARGET_CS=1</Defines>
            <AdditionalOptions>$(AssemblyAttributesAdditionalOptions)</AdditionalOptions>
            <CompileAsCpp>false</CompileAsCpp>
        </Internal_AssemblyAttributePreprocess>
    </ItemGroup>

    <!-- ********************************************************************************************* -->
    <!-- *** AssemblyAttribute Generation -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup Condition="'$(AssemblyKeyFile)' == ''">
        <AssemblyKeyFile Condition="'$(AssemblyKeyType)' == 'ECMA'">$(DevDivToolsPath)\EcmaPublicKey.snk</AssemblyKeyFile>
        <AssemblyKeyFile Condition="'$(AssemblyKeyType)' != 'ECMA'">$(DevDivToolsPath)\FinalPublicKey.snk</AssemblyKeyFile>
    </PropertyGroup>

    <ItemGroup>
        <Internal_AssemblyPreprocess Include="@(Internal_AssemblyAttributePreprocess);@(Internal_AssemblyRefsPreprocess)"/>
    </ItemGroup>

    <Target Name="GenerateAssemblyAttributes" 
            Condition="'@(Internal_AssemblyPreprocess)' != ''">
        
        <!-- Replacing \ with \\ in the key path and then appending it to the AssemblyAttributesDefines -->
        <!-- Do we still need to replace with \\ ?-->
        <CharacterReplace Input="ASSEMBLY_KEY_FILE=$(AssemblyKeyFile)"
            From="\"
            To="\\">
            <Output  TaskParameter="Output"
            PropertyName="AssemblyAttributesDefineForKeyFile"/>
        </CharacterReplace>

        <CL 
            AdditionalIncludeDirectories="%(Internal_AssemblyPreprocess.Includes)"
            AdditionalOptions="%(Internal_AssemblyPreprocess.AdditionalOptions)"
            CompileAsCpp="%(Internal_AssemblyPreprocess.CompileAsCpp)"
            IntermediateDirectory="$(IntermediateOutputDirectory)"
            MinimalRebuildFromTracking="$(Internal_MinimalRebuildFromTracking)" 
            PreprocessorDefinitions="$(AssemblyAttributesDefineForKeyFile);$(AssemblyAttributesDefines);%(Internal_AssemblyPreprocess.Defines)"
            PreprocessSuppressLineNumbers="false"
            PreprocessToFile="true"
            Sources="@(Internal_AssemblyPreprocess)"
            TLogReadFiles="@(ClTLogReadFile)" 
            TLogWriteFiles="@(ClTLogWriteFile)" 
            ToolExe="$(ClToolExe)" 
            ToolPath="$(ClToolPath)"
            TrackFileAccess="$(TrackFileAccess)" 
            TreatWChar_tAsBuiltInType="$(ClTreatWChar_tAsBuiltInType)" 
            UseFullPaths="$(ClUseFullPaths)"
        >
            <Output TaskParameter="SourcesCompiled"
                    ItemName="Internal_AssemblyAttributesGenerated" />

        </CL>

        <Message Text="Generated %(Internal_AssemblyPreprocess.OutputFile)"
                 Condition="'@(Internal_AssemblyAttributesGenerated)' != ''" />

        <ItemGroup>
            <!-- Add the preprocessed file to the set of files to be compiled -->
            <CppCompile Include="%(Internal_AssemblyAttributePreprocess.OutputFile)">
                <DisablePrecompiledHeaders>true</DisablePrecompiledHeaders>
            </CppCompile>

            <CppCompile Include="%(Internal_AssemblyRefsPreprocess.OutputFile)">
                <OldSyntaxManagedExtensions>true</OldSyntaxManagedExtensions>
            </CppCompile>

            <!-- this is only necessary for assembly attributes, not assembly refs -->
            <Internal_AssemblyAttributePreprocessOutput Include="%(Internal_AssemblyAttributePreprocess.OutputFile)" />
        </ItemGroup>
     </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Clean Project References  -->
    <!-- ********************************************************************************************* -->
    <Target Name="CleanReferencedProjects"
            Condition="'@(ProjectReference)@(Link)@(TargetLib)@(Lib)@(Internal_LinkAdditionalDependencies)' != '' and '$(BuildProjectReferences)' == 'true'">

        <!-- Handle any project file metadata on linker inputs -->
        <ItemGroup>
            <ProjectReferencesForCleanFromLinkInputs Include="%(Link.ProjectReference);%(TargetLib.ProjectReference);%(Lib.ProjectReference);%(Internal_LinkAdditionalDependencies.ProjectReference)"/>
        </ItemGroup>

        <MSBuild Projects="@(ProjectReference);@(ProjectReferencesForCleanFromLinkInputs)"
                 Targets="Clean"/>

    </Target>
    <!-- ********************************************************************************************* -->
    <!-- *** Resolve Project References before Generate pass -->
    <!-- ********************************************************************************************* -->
    <Target Name="ResolveProjectReferencesForGenerate"
            Condition="'@(ProjectReference)@(Link)@(TargetLib)@(Lib)@(Internal_LinkAdditionalDependencies)' != '' and '$(BuildProjectReferences)' == 'true'">

        <!-- 
             We must ensure that all projects that are being P2P'd to are run in each pass during
             that same pass of its parent. We cannot pass BuildingInSeperatePasses=false to the child project
             since that may (very likely) be a different value to that being passed down from either a
             traversal above or BUILD.EXE - thus causing the project to build again.
        -->

        <!-- Handle any project file metadata on linker inputs -->
        <ItemGroup>
            <ProjectReferencesForGenerateFromLinkInputs Include="%(Link.ProjectReference);%(TargetLib.ProjectReference);%(Lib.ProjectReference);%(Internal_LinkAdditionalDependencies.ProjectReference)"/>
        </ItemGroup>

        <MSBuild Projects="@(ProjectReference);@(ProjectReferencesForGenerateFromLinkInputs)"
                 Targets="BuildGenerated"/>              
               
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Resolve Project References before Compile pass -->
    <!-- ********************************************************************************************* -->
    <Target Name="ResolveProjectReferencesForCompile"
            Condition="'@(ProjectReference)@(Link)@(TargetLib)@(Lib)@(Internal_LinkAdditionalDependencies)' != '' and '$(BuildProjectReferences)' == 'true'">

        <!-- Handle any project file metadata on linker inputs -->
        <ItemGroup>
            <ProjectReferencesForCompileFromLinkInputs Include="%(Link.ProjectReference);%(TargetLib.ProjectReference);%(Lib.ProjectReference);%(Internal_LinkAdditionalDependencies.ProjectReference)"/>
        </ItemGroup>

        <MSBuild Projects="@(ProjectReference);@(ProjectReferencesForCompileFromLinkInputs)"
                 Targets="BuildCompiled"/>
      
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Resolve Project References before Link pass -->
    <!-- ********************************************************************************************* -->
    <Target Name="ResolveProjectReferencesForLink"
            Condition="'@(ProjectReference)@(Link)@(TargetLib)@(Lib)@(Internal_LinkAdditionalDependencies)' != '' and '$(BuildProjectReferences)' == 'true'">

        <!-- Handle any project file metadata on linker inputs -->
        <ItemGroup>
            <ProjectReferencesForLinkFromLinkInputs Include="%(Link.ProjectReference);%(TargetLib.ProjectReference);%(Lib.ProjectReference);%(Internal_LinkAdditionalDependencies.ProjectReference)"/>
        </ItemGroup>
        
        <MSBuild Projects="@(ProjectReference);@(ProjectReferencesForLinkFromLinkInputs)"
                 Targets="BuildLinked"/>

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** C++ Preprocessing -->
    <!-- ********************************************************************************************* -->
    <Target Name="CppPreprocess"
            DependsOnTargets="$(CppPreprocessDependsOn)"
            Condition="@(CppPreprocess) != ''">

        <CL Condition="'%(CppPreprocess.Identity)' != ''" 
            AdditionalIncludeDirectories="%(CppPreprocess.Includes)"
            AdditionalOptions="%(CppPreprocess.AdditionalOptions)"
            ForcedIncludeFiles="%(CppPreprocess.ForceInclude)"
            IntermediateDirectory="$(IntermediateOutputDirectory)"
            MinimalRebuildFromTracking="$(Internal_MinimalRebuildFromTracking)" 
            PreprocessorDefinitions="%(CppPreprocess.Defines)"
            PreprocessSuppressLineNumbers="true"
            PreprocessToFile="true"
            Sources="@(CppPreprocess)"
            TLogReadFiles="@(ClTLogReadFile)" 
            TLogWriteFiles="@(ClTLogWriteFile)" 
            ToolExe="$(ClToolExe)" 
            ToolPath="$(ClToolPath)"
            TrackFileAccess="$(TrackFileAccess)" 
            >
            <Output TaskParameter="PreprocessOutput"
                    ItemName="CppPreprocessOutput" />

        </CL>

        <Copy SourceFiles="@(CppPreprocessOutput)"
              DestinationFiles="%(CppPreprocessOutput.FinalOutput)"
              OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" 
              Condition="'%(CppPreprocessOutput.FinalOutput)' != ''" />
    </Target>

    <Target Name="CppPreprocessAndFilter"
            DependsOnTargets="$(CppPreprocessAndFilterDependsOn)"
            Condition="@(CppPreprocessAndFilter) != ''" >

        <CL Condition="'%(CppPreprocessAndFilter.Identity)' != ''" 
            AdditionalIncludeDirectories="%(CppPreprocessAndFilter.Includes)"
            AdditionalOptions="%(CppPreprocessAndFilter.AdditionalOptions)"
            ForcedIncludeFiles="%(CppPreprocessAndFilter.ForceInclude)"
            IntermediateDirectory="$(IntermediateOutputDirectory)"
            MinimalRebuildFromTracking="$(Internal_MinimalRebuildFromTracking)" 
            PreprocessorDefinitions="%(CppPreprocessAndFilter.Defines)"
            PreprocessSuppressLineNumbers="true"
            PreprocessToFile="true"
            Sources="@(CppPreprocessAndFilter)"
            TLogReadFiles="@(ClTLogReadFile)" 
            TLogWriteFiles="@(ClTLogWriteFile)" 
            ToolExe="$(ClToolExe)" 
            ToolPath="$(ClToolPath)"
            TrackFileAccess="$(TrackFileAccess)" 
        >
            <Output TaskParameter="SourcesCompiled"
                    ItemName="Internal_CppPreprocessAndFilterGenerated" />
            <Output TaskParameter="PreprocessOutput"
                    ItemName="CppPreprocessAndFilterOutput" />
        </CL>

        <Copy
            SourceFiles="@(CppPreprocessAndFilterOutput)"
            DestinationFiles="@(CppPreprocessAndFilterOutput->'$(IntermediateOutputRelativePath)\%(Filename)%(Extension).tmp')"
            OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" 
            Condition="'@(Internal_CppPreprocessAndFilterGenerated)' != ''"
            />

        <Exec Command="findstr /V /R /C:&quot;%(CppPreprocessAndFilterOutput.FilterRegEx)&quot; $(IntermediateOutputRelativePath)\%(CppPreprocessAndFilterOutput.Filename)%(CppPreprocessAndFilterOutput.Extension).tmp > %(CppPreprocessAndFilterOutput.Identity)" 
              StandardOutputImportance="Normal"
              Condition="'@(Internal_CppPreprocessAndFilterGenerated)' != ''"
              />

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** C/C++ PCH Creation -->
    <!-- ********************************************************************************************* -->
    <ItemGroup>
        <PCHCompile Include="$(PCHCompile)" />
    </ItemGroup>

    <PropertyGroup>
        <ClCreatePchDependsOn>CheckCLForceRebuildTriggers</ClCreatePchDependsOn>
    </PropertyGroup>

    <Target Name="ClCreatePch"
            DependsOnTargets="$(ClCreatePchDependsOn)"
            Condition="'$(EnableCxxPCHHeaders)' == 'true' and '@(PCHCompile)' != ''">

        <!-- /clr- is not supported by some versions of cl, and it's superfluous-->
        <PropertyGroup>
            <ManagedCxx Condition=" '$(ManagedCxx)'=='false'"/>
        </PropertyGroup>

        <!--
            The warning below contains the character sequence X0000. This stops BUILD.EXE from escalating
            this warning into an error in what seems to be random circumstances.
        -->

        <Warning Condition="'$(ClBufferSecurityCheck)' == 'false' and '$(SuppressClBufferSecurityCheckWarning)' != 'true'"
                    Text="X0000 : SECURITY ALERT :  Buffer overflow checks disabled. Turning off /GS : SECURITY ALERT" />

        <ItemGroup>
            <PCHCompile>
                <CompileAsManaged Condition="'%(PCHCompile.CompileAsManaged)' == '' and '%(PCHCompile.Unmanaged)' != 'true'">$(ManagedCxx)</CompileAsManaged>
                <CompileAsManaged Condition="'%(PCHCompile.CompileAsManaged)' == '' and '%(PCHCompile.Unmanaged)' == 'true'">false</CompileAsManaged>
                <PrecompiledHeaderFile Condition="'%(PCHCompile.PrecompiledHeaderFile)' == ''">$(PCHOutput)</PrecompiledHeaderFile>
                <PrecompiledHeader Condition="'%(PCHCompile.PrecompiledHeader)' == ''">$(PCHHeader)</PrecompiledHeader>
                <StackFrameCheck Condition="'%(PCHCompile.StackFrameCheck)' == ''">$(ClStackFrameCheck)</StackFrameCheck>
                <StackFrameCheck Condition="'%(PCHCompile.StackFrameCheck)' == 'false'"></StackFrameCheck>
                <UninitializedVariableCheck Condition="'%(PCHCompile.UninitializedVariableCheck)' == ''">$(ClUninitializedVariableCheck)</UninitializedVariableCheck>
                <UninitializedVariableCheck Condition="'%(PCHCompile.UninitializedVariableCheck)' == 'false'"></UninitializedVariableCheck>
            </PCHCompile>
         </ItemGroup>

        <!-- If we are not doing an incremental build, then delete the PCH, in case
             this non-incremental build is being caused by a missing PDB. This will cause CL
             to re-create the missing PDB. -->
        <Delete Files="$(IntermediateOutputPath)%(PCHCompile.PrecompiledHeaderFile)"
                ContinueOnError="true"
                Condition="'$(Internal_MinimalRebuildFromTracking)' != 'true'"/>

        <CL 
            AdditionalIncludeDirectories=".;$(UserIncludes);$(CrtIncPath);$(AtlIncPath);$(SdkIncPath);$(SdkIncInternalPath);$(DevDivSdkIncPath);$(DdkIncPath);$(VSCommonIncPath);$(IntermediateOutputDirectory);$(OakIncPath)"
            AdditionalOptions="$(ClAdditionalOptions) $(MscOptimizations) $(ClPCHAdditionalOptions)"
            AdditionalUsingDirectories="$(ClAdditionalUsingDirectories)"
            BrowseInformation="$(ClBrowseInformation)"
            BrowseInformationFile="$(ClBrowseInformationFile)"
            BufferSecurityCheck="$(ClBufferSecurityCheck)"
            CallingConvention="$(ClCallingConvention)"
            CompileAsCpp="true" 
            CompileAsManaged="%(PCHCompile.CompileAsManaged)"
            DebugInformationFormat="$(ClDebugInformationFormat)"
            Detect64BitPortabilityProblems="$(ClDetect64BitPortabilityProblems)"
            DisableSpecificWarnings="@(ClDisableSpecificWarnings)" 
            ExceptionHandling="$(ClExceptionHandling)"
            ExternCNeverThrowsException="$(ClExternCNeverThrowsException)"
            FavorSizeOrSpeed="$(ClFavorSizeOrSpeed)" 
            ForceConformanceInForLoopScope="$(ClEnforceStandardScoping)" 
            ForcedIncludeFiles="$(ClForcedIncludeFiles)"
            ForcedUsingFiles="@(ReferencePath);%(PCHCompile.ForcedUsingFiles)"
            FunctionLevelLinking="$(ClFunctionLevelLinking)"
            IlOnlyManagedAssembly="$(ClIlOnlyManagedAssembly)"
            InitialAppDomain="$(ClInitialAppDomain)" 
            InjectPrecompiledHeaderReference="$(ClInjectPrecompiledHeaderReference)"
            InlineFunctionExpansion="$(ClInlineFunctionExpansion)"
            IntermediateDirectory="$(IntermediateOutputDirectory)"
            IntrinsicFunctions="$(ClIntrinsicFunctions)" 
            MinimalRebuild="$(ClMinimalRebuild)"
            MinimalRebuildForIDE="$(ClMinimalRebuildForIDE)"
            MinimalRebuildFromTracking="$(Internal_MinimalRebuildFromTracking)" 
            OldSyntaxManagedExtensions="$(ClOldSyntaxManagedExtensions)" 
            OmitDefaultLibraryName="$(ClOmitDefaultLibraryName)" 
            OmitFramePointers="$(ClOmitFramePointers)"
            Optimization="$(ClOptimization)"
            PathOverride="$(ClPathOverride)"
            PrecompiledHeaderFile="$(IntermediateOutputPath)%(PCHCompile.PrecompiledHeaderFile)"
            PrecompiledHeaderThrough="%(PCHCompile.PrecompiledHeader)"
            PreprocessorDefinitions="$(ClDefines);$(CppOnlyDefines)"
            ProgramDataBaseFileName="$(ClProgramDataBaseFileName)"
            RuntimeLibrary="$(ClRuntimeLibrary)"
            RuntimeTypeInfo="$(ClRuntimeTypeInfo)"
            Sources="@(PCHCompile)"            
            SmallerTypeCheck="$(ClSmallerTypeCheck)"
            StackFrameCheck="%(PCHCompile.StackFrameCheck)"
            StringPooling="$(ClStringPooling)"
            StructMemberAlignment="$(ClStructMemberAlignment)"
            SuppressManagedAssembly="$(ClSuppressManagedAssembly)" 
            TLogReadFiles="@(ClTLogReadFile)" 
            TLogWriteFiles="@(ClTLogWriteFile)" 
            ToolExe="$(ClToolExe)" 
            ToolPath="$(ClToolPath)"
            TrackFileAccess="$(TrackFileAccess)" 
            TreatWChar_tAsBuiltInType="$(ClTreatWChar_tAsBuiltInType)" 
            UndefinePreprocessorDefinitions="$(ClUndefines)" 
            UninitializedVariableCheck="%(PCHCompile.UninitializedVariableCheck)"
            UseFullPaths="$(ClUseFullPaths)" 
            UsePrecompiledHeader="$(ClCreatePrecompiledHeader)"
            VerifiableIlOnlyManagedAssembly="$(ClVerifiableIlOnlyManagedAssembly)"
            WarnAsError="$(ClWarningsAsErrors)" 
            WarningLevel="$(ClWarningLevel)"
            WholeProgramOptimization="$(ClWholeProgramOptimization)" 
        >
        </CL>

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** C++ Compilation -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <CppCompileDependsOn>CheckCLForceRebuildTriggers</CppCompileDependsOn>
    </PropertyGroup>

    <Target Name="CppCompile"
            DependsOnTargets="$(CppCompileDependsOn)"
            Condition="'@(CppCompile)' != ''" >

        <!-- Some CL's don't support /clr- -->
        <PropertyGroup>
            <ManagedCxx Condition="'$(ManagedCxx)'=='false'"/>
        </PropertyGroup>

        <ItemGroup>
            <CppCompile>
                <UsePrecompiledHeader Condition="'%(CppCompile.UsePrecompiledHeader)' == '' and '%(CppCompile.DisablePrecompiledHeaders)' != 'true'">$(ClUsePrecompiledHeader)</UsePrecompiledHeader>
                <OldSyntaxManagedExtensions Condition="'%(CppCompile.OldSyntaxManagedExtensions)' == ''">$(ClOldSyntaxManagedExtensions)</OldSyntaxManagedExtensions>
                <CompileAsManaged Condition="'%(CppCompile.CompileAsManaged)' == '' and '%(CppCompile.Unmanaged)' != 'true'">$(ManagedCxx)</CompileAsManaged>
                <CompileAsManaged Condition="'%(CppCompile.CompileAsManaged)' == '' and '%(CppCompile.Unmanaged)' == 'true'">false</CompileAsManaged>
                <PrecompiledHeaderFile Condition="'%(CppCompile.PrecompiledHeaderFile)' == ''">$(PCHOutput)</PrecompiledHeaderFile>
                <PrecompiledHeader Condition="'%(CppCompile.PrecompiledHeader)' == ''">$(PCHHeader)</PrecompiledHeader>
                <StackFrameCheck Condition="'%(CppCompile.StackFrameCheck)' == ''">$(ClStackFrameCheck)</StackFrameCheck>
                <StackFrameCheck Condition="'%(CppCompile.StackFrameCheck)' == 'false'"></StackFrameCheck>
                <UninitializedVariableCheck Condition="'%(CppCompile.UninitializedVariableCheck)' == ''">$(ClUninitializedVariableCheck)</UninitializedVariableCheck>
                <UninitializedVariableCheck Condition="'%(CppCompile.UninitializedVariableCheck)' == 'false'"></UninitializedVariableCheck>
            </CppCompile>
            
            <Internal_ClIncludePath Include=".;$(UserIncludes);$(CrtIncPath);$(AtlIncPath);$(SdkIncPath);$(SdkIncInternalPath);$(DevDivSdkIncPath);$(DdkIncPath);$(VSCommonIncPath);$(IntermediateOutputDirectory);$(VCSdkIncPath)" />
            <Internal_ClIncludePath Include="$(OakIncPath)" Condition="'$(ManagedCxx)' != 'true'" />
        </ItemGroup>

          <CL
            AdditionalIncludeDirectories="@(Internal_ClIncludePath)"
            AdditionalOptions="$(ClAdditionalOptions) $(MscOptimizations) %(CppCompile.AdditionalOptions)"
            AdditionalUsingDirectories="$(ClAdditionalUsingDirectories)"
            BrowseInformation="$(ClBrowseInformation)"
            BrowseInformationFile="$(ClBrowseInformationFile)"
            BufferSecurityCheck="$(ClBufferSecurityCheck)"
            CallingConvention="$(ClCallingConvention)"
            CompileAsCpp="true"
            CompileAsManaged="%(CppCompile.CompileAsManaged)"
            DebugInformationFormat="$(ClDebugInformationFormat)"
            Detect64BitPortabilityProblems="$(ClDetect64BitPortabilityProblems)"
            DisableSpecificWarnings="@(ClDisableSpecificWarnings)"
            ExceptionHandling="$(ClExceptionHandling)"
            ExternCNeverThrowsException="$(ClExternCNeverThrowsException)"
            FavorSizeOrSpeed="$(ClFavorSizeOrSpeed)"             
            ForceConformanceInForLoopScope="$(ClEnforceStandardScoping)" 
            ForcedIncludeFiles="$(ClForcedIncludeFiles)"
            ForcedUsingFiles="@(ReferencePath);%(CppCompile.ForcedUsingFiles)"
            FunctionLevelLinking="$(ClFunctionLevelLinking)"
            IlOnlyManagedAssembly="$(ClIlOnlyManagedAssembly)"
            InitialAppDomain="$(ClInitialAppDomain)" 
            InlineFunctionExpansion="$(ClInlineFunctionExpansion)"
            IntermediateDirectory="$(IntermediateOutputDirectory)"
            IntrinsicFunctions="$(ClIntrinsicFunctions)" 
            MinimalRebuild="$(ClMinimalRebuild)"
            MinimalRebuildForIDE="$(ClMinimalRebuildForIDE)"
            MinimalRebuildFromTracking="$(Internal_MinimalRebuildFromTracking)" 
            ObjectFiles="%(CppCompile.ObjectFile)"            
            OldSyntaxManagedExtensions="%(CppCompile.OldSyntaxManagedExtensions)" 
            OmitDefaultLibraryName="$(ClOmitDefaultLibraryName)"   
            OmitFramePointers="$(ClOmitFramePointers)"
            Optimization="$(ClOptimization)"
            PathOverride="$(ClPathOverride)"
            PrecompiledHeaderFile="$(IntermediateOutputPath)%(CppCompile.PrecompiledHeaderFile)"
            PrecompiledHeaderThrough="%(CppCompile.PrecompiledHeader)"
            PreprocessorDefinitions="$(ClDefines);$(CppOnlyDefines)"
            ProgramDataBaseFileName="$(ClProgramDataBaseFileName)"
            RuntimeLibrary="$(ClRuntimeLibrary)"
            RuntimeTypeInfo="$(ClRuntimeTypeInfo)"
            Sources="@(CppCompile)"
            StackFrameCheck="%(CppCompile.StackFrameCheck)"
            SmallerTypeCheck="$(ClSmallerTypeCheck)"
            StringPooling="$(ClStringPooling)"
            StructMemberAlignment="$(ClStructMemberAlignment)"
            SuppressManagedAssembly="$(ClSuppressManagedAssembly)" 
            TLogReadFiles="@(ClTLogReadFile)" 
            TLogWriteFiles="@(ClTLogWriteFile)" 
            ToolExe="$(ClToolExe)" 
            ToolPath="$(ClToolPath)"           
            TrackFileAccess="$(TrackFileAccess)" 
            TreatWChar_tAsBuiltInType="$(ClTreatWChar_tAsBuiltInType)"             
            UndefinePreprocessorDefinitions="$(ClUndefines)"             
            UninitializedVariableCheck="%(CppCompile.UninitializedVariableCheck)"
            UseFullPaths="$(ClUseFullPaths)"             
            UsePrecompiledHeader="%(CppCompile.UsePrecompiledHeader)"
            VerifiableIlOnlyManagedAssembly="$(ClVerifiableIlOnlyManagedAssembly)"
            WarnAsError="$(ClWarningsAsErrors)" 
            WarningLevel="$(ClWarningLevel)"
            WholeProgramOptimization="$(ClWholeProgramOptimization)"
        >
        </CL>
     </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** CTC Compilation -->
    <!-- ********************************************************************************************* -->
    <Target Name="CtcCompile"
            Inputs="$(MSBuildAllProjects);@(CtcCompile)" 
            Outputs="@(CtcCompile->'$(IntermediateOutputPath)%(Filename).cto')" 
            DependsOnTargets="$(CtcCompileDependsOn)"
            Condition="'@(CtcCompile)' != ''">

        <ItemGroup>
            <Internal_CtcIncludePath Include=".;$(CtcIncludes);$(UserIncludes);$(CrtIncPath);$(AtlIncPath);$(SdkIncPath);$(SdkIncInternalPath);$(DevDivSdkIncPath);$(DdkIncPath);$(VSCommonIncPath);$(ExtOfficeIncPath)" />
        </ItemGroup>        
        
        <Exec Command="$(CtcCommand) -nologo $(CtcAdditionalOptions) %(CtcCompile.Identity) @(CtcCompile->'$(IntermediateOutputPath)%(Filename).cto') -Ccl /I&quot;@(Internal_CtcIncludePath,'&quot; /I&quot;')&quot;" 
              StandardOutputImportance="Normal"/>

    </Target>

    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Assembler Assembling -->
    <!-- ********************************************************************************************* -->

    <PropertyGroup>
        <AssembleAssemblerDependsOn>Assemble386Assembler</AssembleAssemblerDependsOn>
    </PropertyGroup>

    <ItemGroup>
        <Clean Include="@(Assemble386->'$(IntermediateOutputPath)%(Filename).obj')"/>
    </ItemGroup>

    <Target Name="AssembleAssembler"
            DependsOnTargets="$(AssembleAssemblerDependsOn)">
    </Target>

    <Target Name="Assemble386Assembler"
            DependsOnTargets="$(Assemble386AssemblerDependsOn)"
            Inputs="$(MSBuildAllProjects);@(Assemble386)"
            Outputs="@(Assemble386->'$(IntermediateOutputPath)%(Filename).obj')"
            Condition="'@(Assemble386)' != ''">

        <PropertyGroup>
            <Internal_Assemble386MasmCompatibleFlag Condition="'$(Assemble386MasmCompatible)' == 'true'">/Zm</Internal_Assemble386MasmCompatibleFlag>
        </PropertyGroup>

        <ItemGroup>
            <!-- ml.exe does not support more than 10 include paths. Keep only Sdk/Ddk paths and make sure to include everything that is needed in UserAssemble386IncludePath. -->
            <Internal_Assemble386IncludePath Include="$(UserAssemble386IncludePath);$(SdkIncPath);$(SdkIncInternalPath);$(DevDivSdkIncPath);$(DdkIncPath)" />
            <Internal_Assemble386Defines Include="$(ClDefines)" />
        </ItemGroup>        
        
        <Exec Command="$(Assemble386Command) -c -coff -Cx -nologo $(Internal_Assemble386MasmCompatibleFlag) $(Assemble386Flags) -safeseh /Zi -Ii386\ -I. /I&quot;@(Internal_Assemble386IncludePath,'&quot; /I&quot;')&quot; /D@(Internal_Assemble386Defines,' /D') -Fo@(Assemble386->'$(IntermediateOutputPath)%(Filename).obj') %(Assemble386.Identity)" 
              StandardOutputImportance="Normal"
              Outputs="@(Assemble386->'$(IntermediateOutputPath)%(Filename).obj')"/>

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** x64 Assembling -->
    <!-- ********************************************************************************************* -->

    <PropertyGroup>
          <AssembleAssemblerDependsOn>$(AssembleAssemblerDependsOn);AssembleAmd64Assembler</AssembleAssemblerDependsOn>
    </PropertyGroup>

    <ItemGroup>
        <Clean Include="@(AssembleAmd64->'$(IntermediateOutputPath)%(Filename).obj')"/>
    </ItemGroup>

    <Target Name="AssembleAmd64Assembler"
            DependsOnTargets="$(AssembleAmd64AssemblerDependsOn)"
            Inputs="$(MSBuildAllProjects);@(AssembleAmd64)"
            Outputs="@(AssembleAmd64->'$(IntermediateOutputPath)%(Filename).obj')"
            Condition="'@(AssembleAmd64)' != ''">

        <PropertyGroup>
            <Internal_AssembleAmd64Flags>$(AssembleAmd64Flags) /Zi </Internal_AssembleAmd64Flags>
        </PropertyGroup>
        <ItemGroup>
            <!-- ml.exe does not support more than 10 include paths. Keep only Sdk paths and make sure to include everything that is needed in UserAssembleAmd64IncludePath. -->
            <Internal_AssembleAmd64IncludePath Include="$(UserAssembleAmd64IncludePath);$(SdkIncPath);$(SdkIncInternalPath);$(DevDivSdkIncPath);$(DdkIncPath)" />
            <Internal_AssembleAmd64Defines Include="$(ClDefines)" />
        </ItemGroup>        
        
        <Exec Command="$(AssembleAmd64Command) -c -Cx -nologo $(Internal_AssembleAmd64MasmCompatibleFlag) $(AssembleAmd64Flags) /Zi -IiX64\ -I. /I&quot;@(Internal_AssembleAmd64IncludePath,'&quot; /I&quot;')&quot; /D@(Internal_AssembleAmd64Defines,' /D') -Fo@(AssembleAmd64->'$(IntermediateOutputPath)%(Filename).obj') %(AssembleAmd64.Identity)"
              StandardOutputImportance="Normal"        
              Outputs="@(AssembleAmd64->'$(IntermediateOutputPath)%(Filename).obj')"/>
    </Target>
    <!-- ********************************************************************************************* -->

     <!-- ********************************************************************************************* -->
     <!-- *** ia64 Assembling -->
     <!-- ********************************************************************************************* -->

     <PropertyGroup>
          <AssembleAssemblerDependsOn>$(AssembleAssemblerDependsOn);AssembleIa64Assembler</AssembleAssemblerDependsOn>
     </PropertyGroup>

     <ItemGroup>
          <Clean Include="@(AssembleIa64->'$(IntermediateOutputPath)%(Filename).obj')"/>
     </ItemGroup>

     <Target Name="AssembleIa64Assembler"
       DependsOnTargets="$(AssembleIa64AssemblerDependsOn)"
       Inputs="@(AssembleIa64)"
       Outputs="@(AssembleIa64->'$(IntermediateOutputPath)%(Filename).obj')"
       Condition="'@(AssembleIa64)' != ''">

		<PropertyGroup>
			<Internal_AssembleIa64Flags>$(AssembleIa64Flags)</Internal_AssembleIa64Flags>
		</PropertyGroup>
		<ItemGroup>
			<Internal_AssembleIa64IncludePath Include="$(UserAssembleIa64IncludePath);$(UserIncludes);$(CrtIncPath);$(AtlIncPath);$(SdkIncPath);$(VSCommonIncPath);$(ExtOfficeIncPath)" />
		</ItemGroup>
		<Exec Command="$(AssembleIa64Command) $(Internal_AssembleIa64Flags) -I&quot;ia64&quot; -I. -I&quot;@(Internal_AssembleIa64IncludePath,'&quot; -I&quot;')&quot; -o@(AssembleIa64->'$(IntermediateOutputPath)%(Filename).obj') @(AssembleIa64)"
              StandardOutputImportance="Normal"
              Outputs="@(AssembleIa64->'$(IntermediateOutputPath)%(Filename).obj')"
              Condition="'%(AssembleIa64.Identity)' != ''"/>
	</Target>

     <!-- ********************************************************************************************* -->
    <!-- *** Check triggers that might need to cause non-minimal rebuilds for CL                       -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <CheckCLForceRebuildTriggersDependsOn>CheckForceRebuildTriggers</CheckCLForceRebuildTriggersDependsOn>
    </PropertyGroup>

    <Target Name="CheckCLForceRebuildTriggers"
            DependsOnTargets="$(CheckCLForceRebuildTriggersDependsOn)">
        <PropertyGroup>
            <!-- If our PDB is missing then we need to disable minimal rebuild for C/C++/PCH -->
            <Internal_MinimalRebuildFromTracking Condition="'$(ClDebugInformationFormat)' == 'Enabled' and !Exists('$(ClProgramDataBaseFileName)') ">false</Internal_MinimalRebuildFromTracking>
        </PropertyGroup>

        <Message Text="$(ClProgramDataBaseFileName) is missing, recompilation required." Condition="'$(ClDebugInformationFormat)' == 'Enabled' and !Exists('$(ClProgramDataBaseFileName)') " />
    </Target>

    <!-- ********************************************************************************************* -->
    <!-- *** Compute generated CCompile inputs (e.g. from MIDL) -->
    <!-- ********************************************************************************************* -->
    <Target Name="ComputeGeneratedCCompileInputs"
            DependsOnTargets="$(ComputeGeneratedCCompileInputsDependsOn)"
            Condition="$(BuildingInSeparatePasses) == 'true'">
        <ItemGroup>
            <CCompile Include="@(Idl->'$(IntermediateOutputPath)%(Filename)_i.c')" Condition="'%(Idl.CompileInterface)' == 'true'" />
            <CCompile Include="@(Idl->'$(IntermediateOutputPath)%(Filename)_p.c')" Condition="'%(Idl.CompileProxy)' == 'true'" />
            <IdlTypeLibrary Include="@(Idl->'$(MidlTlbDir)\%(Filename).tlb')" Condition="'%(Idl.TypeLibraryName)' == ''" />
            <IdlTypeLibrary Include="@(Idl->'%(TypeLibraryName)')" Condition="'%(Idl.TypeLibraryName)' != ''" />

            <!-- Add the preprocessed file to the set of files to be compiled -->
            <CppCompile Include="%(Internal_AssemblyAttributePreprocess.OutputFile)">
                <DisablePrecompiledHeaders>true</DisablePrecompiledHeaders>
            </CppCompile>
            <CppCompile Include="%(Internal_AssemblyRefsPreprocess.OutputFile)">
                <OldSyntaxManagedExtensions>true</OldSyntaxManagedExtensions>
            </CppCompile>

            <!-- this is only necessary for assembly attributes, not assembly refs -->
            <Internal_AssemblyAttributePreprocessOutput Include="%(Internal_AssemblyAttributePreprocess.OutputFile)" />
        </ItemGroup>
     </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Compute compiled obj inputs for Lib and ImportLib (e.g. from CCompile, CppCompile) -->
    <!-- ********************************************************************************************* -->
    <Target Name="ComputeCompiledLibInputs"
            DependsOnTargets="$(ComputeCompiledLibInputsDependsOn)">
        <!-- All objects that were directly included into ImportLib and not through CCompile, CppCompile, ...etc must have IncludeInImportLib and IncludeInLink metadata set to true, unless already specified otherwise. This is needed because the importlib target needs these metadata non null and there is always a default that can be deduced. The IncludeInLink metadata won't cause the item to be included also into Link item group (that should be done directly or through the regular process), but is causing the item to be included in the import lib, instead of only in the hybrid lib. -->
        <ItemGroup>
            <ImportLib>
                <IncludeInImportLib Condition="'%(ImportLib.IncludeInImportLib)' == ''">true</IncludeInImportLib>
                <IncludeInLink Condition="'%(ImportLib.IncludeInLink)' == ''">true</IncludeInLink>
            </ImportLib>
        </ItemGroup>
        <!-- Set defaults for IncludeInImportLib, IncludeInLib and IncludeInLink metadata, since the ImportLib target is not expecting them to have null values. -->
        <ItemGroup>
            <Assemble386>
                <IncludeInLib Condition="'%(Assemble386.IncludeInLib)' == ''">true</IncludeInLib>
                <IncludeInLink Condition="'%(Assemble386.IncludeInLink)' == ''">true</IncludeInLink>
                <IncludeInImportLib Condition="'%(Assemble386.IncludeInImportLib)' == '' and '%(Assemble386.IncludeInLink)' == 'false'">false</IncludeInImportLib>
                <IncludeInImportLib Condition="'%(Assemble386.IncludeInImportLib)' == '' and '%(Assemble386.IncludeInLink)' != 'false'">true</IncludeInImportLib>
            </Assemble386>
            <AssembleAmd64>
                <IncludeInLib Condition="'%(AssembleAmd64.IncludeInLib)' == ''">true</IncludeInLib>
                <IncludeInLink Condition="'%(AssembleAmd64.IncludeInLink)' == ''">true</IncludeInLink>
                <IncludeInImportLib Condition="'%(AssembleAmd64.IncludeInImportLib)' == '' and '%(AssembleAmd64.IncludeInLink)' == 'false'">false</IncludeInImportLib>
                <IncludeInImportLib Condition="'%(AssembleAmd64.IncludeInImportLib)' == '' and '%(AssembleAmd64.IncludeInLink)' != 'false'">true</IncludeInImportLib>
            </AssembleAmd64>
            <AssembleIa64>
                <IncludeInLib Condition="'%(AssembleIa64.IncludeInLib)' == ''">true</IncludeInLib>
                <IncludeInLink Condition="'%(AssembleIa64.IncludeInLink)' == ''">true</IncludeInLink>
                <IncludeInImportLib Condition="'%(AssembleIa64.IncludeInImportLib)' == '' and '%(AssembleIa64.IncludeInLink)' == 'false'">false</IncludeInImportLib>
                <IncludeInImportLib Condition="'%(AssembleIa64.IncludeInImportLib)' == '' and '%(AssembleIa64.IncludeInLink)' != 'false'">true</IncludeInImportLib>
            </AssembleIa64>
        </ItemGroup>
        <ItemGroup>
            <CCompile>
                <IncludeInLib Condition="'%(CCompile.IncludeInLib)' == ''">true</IncludeInLib>
                <IncludeInLink Condition="'%(CCompile.IncludeInLink)' == ''">true</IncludeInLink>
                <IncludeInImportLib Condition="'%(CCompile.IncludeInImportLib)' == '' and '%(CCompile.IncludeInLink)' == 'false'">false</IncludeInImportLib>
                <IncludeInImportLib Condition="'%(CCompile.IncludeInImportLib)' == '' and '%(CCompile.IncludeInLink)' != 'false'">true</IncludeInImportLib>
            </CCompile>
            <CppCompile>
                <IncludeInLib Condition="'%(CppCompile.IncludeInLib)' == ''">true</IncludeInLib>
                <IncludeInLink Condition="'%(CppCompile.IncludeInLink)' == ''">true</IncludeInLink>
                <IncludeInImportLib Condition="'%(CppCompile.IncludeInImportLib)' == '' and '%(CppCompile.IncludeInLink)' == 'false'">false</IncludeInImportLib>
                <IncludeInImportLib Condition="'%(CppCompile.IncludeInImportLib)' == '' and '%(CppCompile.IncludeInLink)' != 'false'">true</IncludeInImportLib>
            </CppCompile>
        </ItemGroup>
        <ItemGroup>
            <PCHCompile>
                <IncludeInLib Condition="'%(PCHCompile.IncludeInLib)' == ''">true</IncludeInLib>
                <IncludeInLink Condition="'%(PCHCompile.IncludeInLink)' == ''">true</IncludeInLink>
                <IncludeInImportLib Condition="'%(PCHCompile.IncludeInImportLib)' == '' and '%(PCHCompile.IncludeInLink)' == 'false'">false</IncludeInImportLib>
                <IncludeInImportLib Condition="'%(PCHCompile.IncludeInImportLib)' == '' and '%(PCHCompile.IncludeInLink)' != 'false'">true</IncludeInImportLib>
            </PCHCompile>
            <RCResourceFile>
                <IncludeInLib Condition="'%(RCResourceFile.IncludeInLib)' == ''">true</IncludeInLib>
                <IncludeInLink Condition="'%(RCResourceFile.IncludeInLink)' == ''">true</IncludeInLink>
                <!-- Res files are not included in the import lib by default. -->
                <IncludeInImportLib Condition="'%(RCResourceFile.IncludeInImportLib)' == ''">false</IncludeInImportLib>
            </RCResourceFile>
        </ItemGroup>

        <!-- Feed the ImportLib and Lib item groups with the results of compiling targets (CCompile, CppCompile, ...), depending on their specified inclusion metadata. -->
        <ItemGroup>
            <ImportLib Include="@(Assemble386->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(Assemble386.IncludeInImportLib)' == 'true'"/>
            <ImportLib Include="@(AssembleAmd64->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(AssembleAmd64.IncludeInImportLib)' == 'true'"/>
            <ImportLib Include="@(AssembleIa64->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(AssembleIa64.IncludeInImportLib)' == 'true'"/>
            <ImportLib Include="@(CCompile->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(CCompile.IncludeInImportLib)' == 'true' and '%(CCompile.ObjectFile)' == ''"/>
            <ImportLib Include="@(CppCompile->'$(IntermediateOutputPath)%(ObjectFile)')" Condition="'%(CCompile.IncludeInImportLib)' == 'true' and '%(CCompile.ObjectFile)' != ''"/>
            <ImportLib Include="@(CppCompile->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(CppCompile.IncludeInImportLib)' == 'true' and '%(CppCompile.ObjectFile)' == ''"/>
            <ImportLib Include="@(CppCompile->'$(IntermediateOutputPath)%(ObjectFile)')" Condition="'%(CppCompile.IncludeInImportLib)' == 'true' and '%(CppCompile.ObjectFile)' != ''"/>
        </ItemGroup>
        <ItemGroup>
            <ImportLib Include="@(PCHCompile->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'$(EnableCxxPCHHeaders)' == 'true' and Exists('$(IntermediateOutputPath)\%(PCHCompile.Filename).obj')"/>
            <ImportLib Include="@(RCResourceFile->'$(RCIntermediateOutputDirectory)%(Filename).res')" Condition="'%(RCResourceFile.IncludeInImportLib)' == 'true'"/>
        </ItemGroup>

        <ItemGroup>
            <Lib Include="@(Assemble386->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(Assemble386.IncludeInLib)' == 'true'"/>
            <Lib Include="@(AssembleAmd64->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(AssembleAmd64.IncludeInLib)' == 'true'"/>
            <Lib Include="@(AssembleIa64->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(AssembleIa64.IncludeInLib)' == 'true'"/>
            <Lib Include="@(CCompile->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(CCompile.IncludeInLib)' == 'true' and '%(CCompile.ObjectFile)' == ''"/>
            <Lib Include="@(CppCompile->'$(IntermediateOutputPath)%(ObjectFile)')" Condition="'%(CCompile.IncludeInLib)' == 'true' and '%(CCompile.ObjectFile)' != ''"/>
            <Lib Include="@(CppCompile->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(CppCompile.IncludeInLib)' == 'true' and '%(CppCompile.ObjectFile)' == ''"/>
            <Lib Include="@(CppCompile->'$(IntermediateOutputPath)%(ObjectFile)')" Condition="'%(CppCompile.IncludeInLib)' == 'true' and '%(CppCompile.ObjectFile)' != ''"/>
        </ItemGroup>
        <ItemGroup>
            <Lib Include="@(PCHCompile->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'$(EnableCxxPCHHeaders)' == 'true' and Exists('$(IntermediateOutputPath)\%(PCHCompile.Filename).obj')"/>
            <Lib Include="@(RCResourceFile->'$(RCIntermediateOutputDirectory)%(Filename).res')" Condition="'%(RCResourceFile.IncludeInLib)' == 'true'"/>
        </ItemGroup>
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** C Compilation -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <CCompileDependsOn>CheckCLForceRebuildTriggers</CCompileDependsOn>
    </PropertyGroup>

    <Target Name="CCompile"
            DependsOnTargets="$(CCompileDependsOn)"
            Condition="'@(CCompile)' != ''" >
        
        <PropertyGroup>
            <ManagedCxx Condition=" '$(ManagedCxx)'=='false'"/>
        </PropertyGroup>

        <CL
            AdditionalIncludeDirectories=".;$(UserIncludes);$(CrtIncPath);$(AtlIncPath);$(SdkIncPath);$(SdkIncInternalPath);$(DevDivSdkIncPath);$(DdkIncPath);$(VSCommonIncPath);$(IntermediateOutputDirectory);$(OakIncPath);$(VCSdkIncPath)"
            AdditionalOptions="$(ClAdditionalOptions) $(MscOptimizations) %(CCompile.AdditionalOptions)"
            AdditionalUsingDirectories="$(ClAdditionalUsingDirectories)"
            BrowseInformation="$(ClBrowseInformation)"
            BrowseInformationFile="$(ClBrowseInformationFile)"            
            BufferSecurityCheck="$(ClBufferSecurityCheck)"
            CallingConvention="$(ClCallingConvention)"
            CompileAsManaged="$(ManagedCxx)"
            CompileAsC="%(CCompile.CompileAsC)"
            DebugInformationFormat="$(ClDebugInformationFormat)"
            Detect64BitPortabilityProblems="$(ClDetect64BitPortabilityProblems)"
            DisableSpecificWarnings="@(ClDisableSpecificWarnings)" 
            ExceptionHandling="$(ClExceptionHandling)"
            ExternCNeverThrowsException="$(ClExternCNeverThrowsException)"
            FavorSizeOrSpeed="$(ClFavorSizeOrSpeed)"             
            ForceConformanceInForLoopScope="$(ClEnforceStandardScoping)" 
            ForcedIncludeFiles="$(ClForcedIncludeFiles)"
            ForcedUsingFiles="@(ReferencePath)"
            FunctionLevelLinking="$(ClFunctionLevelLinking)"
            IlOnlyManagedAssembly="$(ClIlOnlyManagedAssembly)"
            InitialAppDomain="$(ClInitialAppDomain)"
            InlineFunctionExpansion="$(ClInlineFunctionExpansion)"            
            IntermediateDirectory="$(IntermediateOutputDirectory)"
            IntrinsicFunctions="$(ClIntrinsicFunctions)" 
            MinimalRebuild="$(ClMinimalRebuild)"
            MinimalRebuildForIDE="$(ClMinimalRebuildForIDE)"
            MinimalRebuildFromTracking="$(Internal_MinimalRebuildFromTracking)" 
            ObjectFiles="%(CCompile.ObjectFile)"           
            OldSyntaxManagedExtensions="$(ClOldSyntaxManagedExtensions)" 
            OmitDefaultLibraryName="$(ClOmitDefaultLibraryName)" 
            OmitFramePointers="$(ClOmitFramePointers)"
            Optimization="$(ClOptimization)"
            PathOverride="$(ClPathOverride)"
            PreprocessorDefinitions="$(ClDefines);$(COnlyDefines)"
            ProgramDataBaseFileName="$(ClProgramDataBaseFileName)"
            RuntimeLibrary="$(ClRuntimeLibrary)"
            RuntimeTypeInfo="$(ClRuntimeTypeInfo)"
            Sources="@(CCompile)"
            StackFrameCheck="$(ClStackFrameCheck)"
            SmallerTypeCheck="$(ClSmallerTypeCheck)"
            StringPooling="$(ClStringPooling)"
            StructMemberAlignment="$(ClStructMemberAlignment)"
            SuppressManagedAssembly="$(ClSuppressManagedAssembly)" 
            TLogReadFiles="@(ClTLogReadFile)" 
            TLogWriteFiles="@(ClTLogWriteFile)" 
            ToolExe="$(ClToolExe)" 
            ToolPath="$(ClToolPath)"                       
            TrackFileAccess="$(TrackFileAccess)" 
            TreatWChar_tAsBuiltInType="$(ClTreatWChar_tAsBuiltInType)"             
            UndefinePreprocessorDefinitions="$(ClUndefines)"
            PrecompiledHeaderFile="%(CCompile.PrecompiledHeaderFile)"
	    UsePrecompiledHeader="%(CCompile.UsePrecompiledHeader)"
            UninitializedVariableCheck="$(ClUninitializedVariableCheck)"
            UseFullPaths="$(ClUseFullPaths)"             
            VerifiableIlOnlyManagedAssembly="$(ClVerifiableIlOnlyManagedAssembly)"
            WarnAsError="$(ClWarningsAsErrors)"   
            WarningLevel="$(ClWarningLevel)"
            WholeProgramOptimization="$(ClWholeProgramOptimization)" 
        >
        </CL>
     </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Lib Creation -->
    <!-- ********************************************************************************************* -->
    <Target Name="Lib"            
            Inputs="$(MSBuildAllProjects);@(Lib)"
            Outputs="$(LibOutput)"
            DependsOnTargets="$(LibDependsOn)"
            Condition="'@(Lib)' != '' and '$(LibMakeLib)' == 'true'">

        <Lib 
            AdditionalOptions="$(LibrarianFlags)"
            DisableSpecificWarnings="$(LinkLibIgnore)" 
            IgnoreAllDefaultLibraries="true" 
            LinkTimeCodeGeneration="$(LibLinkTimeCodeGeneration)"
            ModuleDefinitionFile="$(DllDef)" 
            Name="$(LibName)"             
            OutputFile="$(LibOutput)"
            Sources="@(Lib)" 
            SubSystem="$(LinkSubSystem),$(Internal_SubsystemVer)"
            TargetMachine="$(LinkLibMachineType)"
            ToolExe="$(LibToolExe)" 
            ToolPath="$(LibToolPath)"
            WarnAsError = "$(LibWarnAsError)"
            />
            
    </Target>
    
    <!-- Log where the output is found, as we do for managed binaries -->
    <Target Name="LogOutputFileForLib">
        <Message Importance="High" Text="$(MSBuildProjectName) -&gt; $(LibOutput)" />
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Import Lib Creation -->
    <!-- ********************************************************************************************* -->
    <Target Name="ImportLib"            
            Inputs="$(MSBuildAllProjects);@(ImportLib)"
            Outputs="$(LibOutput)"
            DependsOnTargets="$(ImportLibDependsOn)"
            Condition="'@(ImportLib)' != '' and '$(GenerateImportLib)' == 'true'">

        <ItemGroup>
            <!-- Include the LibOutput property into an item group so that we can access metadata like path, file name, extension. -->
            <Internal_ImportLibOutput Include="$(LibOutput)"/>
        </ItemGroup>
        <ItemGroup>
            <ExtraImportLib Include="@(ImportLib)" 
                Condition="'%(ImportLib.IncludeInLink)' == 'false' and '%(ImportLib.IncludeInImportLib)' == 'true' "/>
        </ItemGroup>

        <!-- TODO: emit the /def: parameter even if $(DllDef) is empty. /def: ensures that the resulting lib will be an import lib instead of a static lib, if a definition file is not provided. -->
        <PropertyGroup>
            <UseEmptyDef Condition="'$(DllDef)' == ''">/def:</UseEmptyDef>
        </PropertyGroup>
        <!-- Create an import lib from all the objects required in the corresponding dll and which are not forbidden from the import lib -->
        <Lib Condition="%(ImportLib.IncludeInLink) == 'true' and %(ImportLib.IncludeInImportLib) == 'true'" 
            AdditionalOptions="$(LibrarianFlags) $(UseEmptyDef)"
            DisableSpecificWarnings="$(LinkLibIgnore)"
            IgnoreAllDefaultLibraries="true"
            LinkTimeCodeGeneration="$(LibLinkTimeCodeGeneration)"             
            ModuleDefinitionFile="$(DllDef)" 
            Name="$(LibName)" 
            OutputFile="@(Internal_ImportLibOutput->'$(IntermediateOutputPath)\%(Filename)%(Extension)')"
            Sources="@(ImportLib)"
            TargetMachine="$(LinkLibMachineType)"
            ToolExe="$(LibToolExe)" 
            ToolPath="$(LibToolPath)"
            WarnAsError="$(LibWarnAsError)"
            />

        <Copy SourceFiles="$(IntermediateOutputPath)\%(Internal_ImportLibOutput.Filename).exp" 
              DestinationFiles="%(Internal_ImportLibOutput.RootDir)\%(Internal_ImportLibOutput.Directory)\%(Internal_ImportLibOutput.Filename).exp"
              SkipUnchangedFiles="true"
              OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" />
        <!-- Create a static lib, from the previously obtained import lib plus all the objects that are not linked into the corresponding dll but are required in the import lib -->
        <Lib
            AdditionalOptions="$(LibrarianFlags)"
            DisableSpecificWarnings="$(LinkLibIgnore)"
            IgnoreAllDefaultLibraries="true"
            LinkTimeCodeGeneration="$(LibLinkTimeCodeGeneration)"             
            Name="$(LibName)" 
            OutputFile="$(LibOutput)"
            Sources="$(IntermediateOutputPath)\%(Internal_ImportLibOutput.Filename)%(Internal_ImportLibOutput.Extension);@(ExtraImportLib)"
            TargetMachine="$(LinkLibMachineType)"
            ToolExe="$(LibToolExe)" 
            ToolPath="$(LibToolPath)"/>
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Compute compiled Link inputs                                                          *** -->
    <!-- *** (e.g. CCompile, CppCompile, ClCreatePCH, (Lib, ImportLib), RC )                       *** -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <ComputeCompiledLinkInputsDependsOn>
            ComputeGeneratedCCompileInputs;
            ComputeResourcePaths
        </ComputeCompiledLinkInputsDependsOn>
    </PropertyGroup>

    <Target Name="ComputeCompiledLinkInputs"
            DependsOnTargets="$(ComputeCompiledLinkInputsDependsOn)"
            Condition="'$(TargetType)' != 'LIBRARY'">

          <ItemGroup>
               <Link Include="@(Assemble386->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(Assemble386.IncludeInLink)' != 'false'"/>
               <Link Include="@(AssembleAmd64->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(AssembleAmd64.IncludeInLink)' != 'false'"/>
               <Link Include="@(AssembleIa64->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(AssembleIa64.IncludeInLink)' != 'false'"/>
               <Link Include="@(CCompile->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(CCompile.IncludeInLink)' != 'false' and '%(CCompile.ObjectFile)' == ''"/>
            <Link Include="@(CppCompile->'$(IntermediateOutputPath)%(ObjectFile)')" Condition="'%(CCompile.IncludeInLink)' != 'false' and '%(CCompile.ObjectFile)' != ''"/>
               <Link Include="@(CppCompile->'$(IntermediateOutputPath)%(Filename).obj')" Condition="'%(CppCompile.IncludeInLink)' != 'false' and '%(CppCompile.ObjectFile)' == ''"/>
               <Link Include="@(CppCompile->'$(IntermediateOutputPath)%(ObjectFile)')" Condition="'%(CppCompile.IncludeInLink)' != 'false' and '%(CppCompile.ObjectFile)' != ''"/>
        </ItemGroup>
		<ItemGroup>
            <Link Include="$(IntermediateOutputPath)\%(PCHCompile.Filename).obj" Condition="'$(EnableCxxPCHHeaders)' == 'true' and Exists('$(IntermediateOutputPath)\%(PCHCompile.Filename).obj')"/>
            <!-- This will handle both Lib and ImportLib -->
            <Internal_LibOutput Include="$(LibOutput)"/>
            <Link Include="@(Internal_LibOutput->'%(RootDir)%(Directory)%(Filename).exp')" Condition="'$(GenerateImportLib)' == 'true' and '$(TargetType)' == 'DYNLINK' and '$(DllDef)' != '' and Exists('@(Internal_LibOutput->'%(RootDir)%(Directory)%(Filename).exp')')"/>
            <Link Include="@(RCResourceFile->'$(RCIntermediateOutputDirectory)%(Filename).res')" Condition="'%(RCResourceFile.IncludeInLink)' != 'false'"/>
            <NativeResource Include="@(RCResourceFile->'$(RCIntermediateOutputDirectory)%(Filename).res')"/>
        </ItemGroup>
     </Target>

    <!-- Compute the items that GenerateResource produced in the previous pass -->
    <Target Name="ComputeResourcePaths" DependsOnTargets="CreateManifestResourceNames" />

    <!-- ********************************************************************************************* -->
    <!-- *** Link -->
    <!-- ********************************************************************************************* -->
    <ItemGroup>
        <Internal_LinkOutputFile Include="$(LinkOutputFile)" />
    </ItemGroup>

    <!-- Any additional inputs to the linker have to be determined beforehand so their timestamps can be checked -->
    <Target Name="DetermineLinkAdditionalDependencies">
        <ItemGroup>
            <!-- If we are incremental linking, then we link to an intermediate place, that way when
                 the manifest is embedded we copy to the actual output location and embed there so that
                 incremental linking continues to operate against the intermedaite binary -->
            <Internal_LinkDestinationFile Include="$(IntermediateOutputPath)%(Internal_LinkOutputFile.Filename)%(Internal_LinkOutputFile.Extension)" Condition="'$(LinkIncremental)' == 'true'"/>
            <Internal_LinkDestinationFile Include="@(Internal_LinkOutputFile)" Condition="'$(LinkIncremental)' != 'true'"/>
            <Internal_LinkAdditionalDependencies Include="$(Win32Libs)" Condition="'$(LinkNoLibraries)' != 'true' and '$(LinkNoWin32Libraries)'=='false'"/>
            <Internal_LinkAdditionalDependencies Include="$(Win32DllLibs);@(LinkPreCrtLibs)" Condition="'$(LinkNoLibraries)' != 'true'"/>
            <Internal_LinkAdditionalDependencies Include="$(LinkMfcLibs)" Condition="'$(LinkNoLibraries)' != 'true' or '$(UseUseMfcUnicode)' == 'true'"/>
            <Internal_LinkAdditionalDependencies Include="$(LinkMfcLibs)" Condition="'$(LinkNoLibraries)' != 'true' or '$(UseUseMfcUnicode)' == 'true'"/>
            <Internal_LinkAdditionalDependencies Include="$(LinkCrtLibs)" Condition="'$(LinkNoLibraries)' != 'true' or '$(UseMsvcrt)' == 'true' or '$(LinkUseCMT)' == 'true'"/>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <LinkDependsOn>DetermineLinkAdditionalDependencies</LinkDependsOn>
    </PropertyGroup>

    <Target Name="Link"
            Inputs="$(MSBuildAllProjects);@(Link);@(TargetLib);
                    @(Internal_LinkResourceInputs);
                    @(Internal_LinkAdditionalDependencies);$(LinkModuleDefinitionFile)"
            Outputs="$(LinkOutputFile)"
            DependsOnTargets="$(LinkDependsOn);_GenerateLinkResourceInputs"
            Condition="'@(Link)' != '' and '$(OutputName)' != ''">

        <PropertyGroup>
            <!-- /debugtype should not be set if linking incrementally -->
            <LinkDebugType Condition="'$(LinkGenerateDebugInformation)' == 'true' and '$(LinkIncremental)' != 'true'">cv,fixup</LinkDebugType>
            <!-- GenerateManifest on Link sets /MANIFEST, which forces a manifest generation, even for resource dlls.
            So unless it is an executable (LinkGenerateUACManifest is true) or LinkForceGenerateManifest is set, we don't want /MANIFEST, unless it's just /MANIFEST:NO. -->
            <Internal_LinkGenerateManifest>$(LinkGenerateManifest)</Internal_LinkGenerateManifest>
            <Internal_LinkGenerateManifest Condition="'$(LinkGenerateManifest)' == 'true' and '$(LinkForceGenerateManifest)' != 'true'"/>
            <Internal_LinkGenerateManifest Condition="'$(LinkGenerateUacManifest)' == 'true'">true</Internal_LinkGenerateManifest>
            <Internal_LinkAssemblyKeyFile Condition="'$(LinkDelaySign)' != ''">$(AssemblyKeyFile)</Internal_LinkAssemblyKeyFile>
        </PropertyGroup>

        <PropertyGroup Condition="'$(LinkBaseAddress)' == ''">
            <LinkBaseAddress Condition="'$(LinkNoBaseAddress)'!='true'">$(BaseAddress)</LinkBaseAddress>
        </PropertyGroup>

        <PropertyGroup Condition="'$(ManagedCxx)' != 'true'">
            <LinkWarningsAsErrors Condition="'$(LinkWarningsAsErrors)' == '' and ('$(TreatWarningsAsErrors)' == '' or '$(TreatWarningsAsErrors)' == 'true')">true</LinkWarningsAsErrors>
            <LinkFullBuild Condition="'$(LinkIncremental)' != 'true'">true</LinkFullBuild>
        </PropertyGroup>  
        
        <ItemGroup Condition="'$(ManagedCxx)' != 'true'">
            <LinkMergeSections Condition="'$(BuildArchitecture)' == 'i386' and '$(LinkMergeRData)' == 'true'" Include=".rdata=.text"/>
        </ItemGroup>
        
        <PropertyGroup>
            <LinkSubSystem Condition="'$(LinkSubSystem)' != '' and '$(Internal_SubsystemVer)' != ''">$(LinkSubSystem),$(Internal_SubsystemVer)</LinkSubSystem>
            <LinkSubSystem Condition="'$(LinkSubSystem)' != '' and '$(Internal_SubsystemVer)' == ''">$(LinkSubSystem)</LinkSubSystem>    
        </PropertyGroup>
        
        <ItemGroup>

            <LinkAssemblyResourceFiles Include="@(EmbeddedResource->'$(IntermediateOutputPath)%(ManifestResourceName).resources')"  
                                       Condition="'%(EmbeddedResource.WithCulture)'=='false' and '%(EmbeddedResource.Type)'=='Resx'  and '%(EmbeddedResource.LogicalName)' == ''"/>

            <LinkAssemblyResourceFiles Include="@(EmbeddedResource->'%(Identity),%(ManifestResourceName)')"  
                                       Condition="'%(EmbeddedResource.WithCulture)'=='false' and '%(EmbeddedResource.Type)'!='Resx'  and '%(EmbeddedResource.LogicalName)' == ''"/>

    	
            <!-- For MC++, the logical name for .resx oddly has ".resources" appended to it -->
            <LinkAssemblyResourceFiles Include="@(EmbeddedResource->'$(IntermediateOutputPath)%(ManifestResourceName).resources,%(LogicalName).resources')"
                                       Condition="'%(EmbeddedResource.WithCulture)'=='false' and '%(EmbeddedResource.Type)'=='Resx' and '%(EmbeddedResource.LogicalName)' != ''"/>
    
            <!-- For MC++, the logical name for non-.resource resources does not have '.resources' appended -->
            <LinkAssemblyResourceFiles Include="@(EmbeddedResource->'%(Identity),%(LogicalName)')" 
                                       Condition="'%(EmbeddedResource.WithCulture)'=='false' and '%(EmbeddedResource.Type)'!='Resx' and '%(EmbeddedResource.LogicalName)' != ''" /> 
        
        </ItemGroup>

        <Link 
            AdditionalDependencies="@(Internal_LinkAdditionalDependencies);@(TargetLib)"
            AdditionalLibraryDirectories="@(LinkAdditionalLibraryDirectories)"
            AdditionalOptions="$(LinkAdditionalOptions)"
            DelaySign="$(LinkDelaySign)"
            AssemblyDebug="$(LinkAssemblyDebug)"
            BaseAddress="$(LinkBaseAddress)"
            DebugType="$(LinkDebugType)" 
            Delay="$(LinkDelayUnload)" 
            DelayLoadDlls="$(LinkDelayLoad)" 
            DisableSpecificWarnings="$(LinkLibIgnore)" 
            EnableCOMDATFolding="$(LinkEnableCOMDATFolding)"
            EmbedManagedResourceFile="@(LinkAssemblyResourceFiles)"
            EntryPointSymbol="$(LinkEntryPoint)"
            FixedBaseAddress="$(LinkFixedBaseAddress)"
            FullBuild="$(LinkFullBuild)" 
            GenerateDebugInformation="$(LinkGenerateDebugInformation)"
            GenerateManifest="$(Internal_LinkGenerateManifest)" 
            GenerateMapFile="$(LinkGenerateMapFile)"
            IgnoreAllDefaultLibraries="!$(LinkUseDefaultLib)"
            IgnoreDefaultLibraryNames="@(LinkIgnoreDefaultLibraryNames)" 
            ImportLibrary="$(LinkImportLibrary)"
            KeyFile="$(Internal_LinkAssemblyKeyFile)"
            LinkDLL="$(LinkDLL)"
            LinkIncremental="$(LinkIncremental)"
            LinkTimeCodeGeneration="$(LibLinkTimeCodeGeneration)" 
            LinkTimeCodeGenerationType="$(LinkTimeCodeGenerationType)"             
            ManifestFile="$(LinkManifestName)" 
            MapFileName="$(LinkMapFileName)"
            MergedIDLBaseFileName="$(LinkMergedIDLBaseFileName)"
            MergeSections="@(LinkMergeSections)" 
            ModuleDefinitionFile="$(LinkModuleDefinitionFile)"
            OperatingSystemVersion="$(LinkOSVersion)"
            OptimizeForWindows98="$(LinkWin98)" 
            OptimizeReferences="$(LinkOptimizeReferences)"
            OutputFile="@(Internal_LinkDestinationFile)"
            ProgramDatabaseAlternatePath="@(Internal_ProgramDataBaseFileName->'%(Filename).pdb')" 
            ProgramDatabaseCompress="$(LinkCompressPdbs)" 
            ProgramDatabaseFile="@(Internal_ProgramDataBaseFileName)"
            ResourceOnlyDLL="$(LinkResourceOnlyDll)" 
            SafeExceptionHandlers="$(LinkSafeSeh)" 
            SetChecksum="$(LinkRelease)" 
            Sources="@(Link)"
            StackCommitSize="$(LinkStackCommit)" 
            StackReserveSize="$(LinkStackReserve)"
            SubSystem="$(LinkSubSystem)"
            TargetMachine="$(LinkLibMachineType)"
            TerminalServerAware="$(LinkTSAware)"
            ToolExe="$(LinkToolExe)" 
            ToolPath="$(LinkToolPath)"            
            Version="$(LinkAppVersion)" 
            WarnAsError="$(LinkWarningsAsErrors)" 
        />

        <!-- Can't remove this because it has ValueSetByTask-->
        <CreateProperty Value="$(LinkOutputFile)">
            <Output PropertyName="AsmMetaCompareOutputAssembly" TaskParameter="ValueSetByTask"/>
        </CreateProperty>

        <PropertyGroup>
            <TargetPath>$(LinkOutputFile)</TargetPath>
        </PropertyGroup>
 
        <!-- In order for incremental linking to work, there must be no external modifications to the
             binary being linked. Embeddeding the manifest counts as a modification, so we only embed 
             into the final output that we copy from the incrementally linked intermediate output -->
        <Copy SourceFiles="$(IntermediateOutputPath)%(Internal_LinkOutputFile.Filename)%(Internal_LinkOutputFile.Extension)" DestinationFiles="$(LinkOutputFile)"
              Condition="'$(LinkIncremental)' == 'true'">
        </Copy>

        <!-- Since the .PDB that matches the link output will be in the intermediate folder, we must also copy
             that to the output directory -->
        <Copy SourceFiles="@(Internal_ProgramDataBaseFileName)" DestinationFolder="@(Internal_LinkOutputFile->'%(RootDir)%(Directory)')"
              Condition="'$(LinkIncremental)' == 'true' and Exists('@(Internal_ProgramDataBaseFileName)')">
        </Copy>

        <!-- Calling targets instead of putting these in a dependency chain, in order to
             piggy-back on this target's TLDA -->
        <CallTarget Targets="GenerateManifest;SignCode;AsmMetaCompare" />
        
    </Target>
    
    <!-- Log where the output is found, as we do for managed binaries -->
    <Target Name="LogOutputFileForLink">
        <Message Importance="High" Text="$(MSBuildProjectName) -&gt; @(Internal_LinkDestinationFile)" />
    </Target>
    
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** SuiteBin Copy -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <CopyToSuiteBin Condition="'$(CopyToSuiteBin)'==''">false</CopyToSuiteBin>
    </PropertyGroup>
    <Target Name="CopyToSuiteBin"
            Condition="'$(CopyToSuiteBin)' == 'true'"
            DependsOnTargets="$(CopyToSuiteBinDependsOn)">

        <Copy SourceFiles="@(Internal_LinkOutputFile)"
              DestinationFolder="$(SuiteBinPath)"
              ContinueOnError="true"
              SkipUnchangedFiles="true"
              OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" 
              Condition="Exists('@(Internal_LinkOutputFile)')"/>
        <Copy SourceFiles="@(Internal_ProgramDataBaseFileName)"
              DestinationFolder="$(SuiteBinPath)"
              ContinueOnError="true"
              SkipUnchangedFiles="true" 
              OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" 
              Condition="Exists('@(Internal_ProgramDataBaseFileName)')"/>
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** SignCode -->
    <!-- ********************************************************************************************* -->
    <!-- TLDA is the responsibility of the caller-->
    <Target Name="SignCode"
            Condition="'$(SoftwarePublishingCertificateFile)' != '' and '$(PrivateKeyFile)' != ''">

        <Exec Command="$(SignCodeCommand) -spc &quot;$(SoftwarePublishingCertificateFile)&quot; -v &quot;$(PrivateKeyFile)&quot; &quot;$(OutputPath)$(OutputName)$(TargetExt)&quot;"
              StandardOutputImportance="Normal"/>
    </Target>

    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** GenerateBrowserInformation -->
    <!-- ********************************************************************************************* -->
    <Target Name="PrepareBrowserFileNames">
    	<ItemGroup>
        	<Internal_BrowserFiles Include="@(CppCompile->'$(IntermediateOutputPath)%(Filename).sbr')" />
	        <Internal_BrowserFiles Include="@(PCHCompile->'$(IntermediateOutputPath)%(Filename).sbr')"
            	                       Condition="Exists('$(IntermediateOutputPath)\%(PCHCompile.Filename).pch')" />
        	<Internal_BrowserFiles Include="@(BrowserInformation)" />
    	</ItemGroup>   
    </Target>

    <PropertyGroup>
        <GenerateBrowserInformationDependsOn>$(GenerateBrowserInformationDependsOn);PrepareBrowserFileNames</GenerateBrowserInformationDependsOn>
    </PropertyGroup>
    
    <Target Name="GenerateBrowserInformation"
            Inputs="$(MSBuildAllProjects)"
            Outputs="$(OutputPath)$(BrowserOutput)"
            DependsOnTargets="$(GenerateBrowserInformationDependsOn)"
            Condition="'@(Internal_BrowserFiles)' != '' and '$(GenerateBrowserFile)' == 'true'">

        <WriteLinesToFile
            File="$(IntermediateOutputRelativePath)\$(BrowserOutput).rsp"
            Lines="@(Internal_BrowserFiles,' ')"
            Overwrite="true"
            />

        <Exec Command="$(BscMakeCommand) $(BscMakeAdditionalOptions) -nologo -n /Iu /El -o &quot;$(OutputPath)$(BrowserOutput)&quot; @$(IntermediateOutputRelativePath)\$(BrowserOutput).rsp"
              StandardOutputImportance="Normal"/>
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** ZipFileContentLog -->
    <!-- ********************************************************************************************* -->
    <Target Name="ZipFileContentLog"            
            DependsOnTargets="$(ZipFileContentLogDependsOn)"
            Condition="'@(Zip)' != '' and '$(OutputZipContentLog)' == 'true'"
            Inputs="$(MSBuildAllProjects);@(Zip)"
            Outputs="$(IntermediateOutputPath)$(OutputName).ziplog"
            >

        <Delete Files="$(IntermediateOutputPath)$(OutputName).ziplog"
                ContinueOnError="true"
                Condition="Exists('$(IntermediateOutputPath)$(OutputName).ziplog')"/>
        
        <ItemGroup>
            <Internal_ZipOutput Include="$(ZipOutput)" />
        </ItemGroup>

        <WriteLinesToFile 
            File="$(IntermediateOutputPath)$(OutputName).ziplog"
            Lines="%(Zip.Localized)&#09;%(Internal_ZipOutput.Filename)%(Internal_ZipOutput.Extension)&#09;$(TemplateDst)&#09;$(BinariesDirectory)\bin&#09;%(Zip.Identity)"
            Overwrite="false"/>

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** ZipFiles -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <ZipFilesDependsOn>
            ZipFileContentLog
        </ZipFilesDependsOn>
    </PropertyGroup>

    <Target Name="ZipFiles"            
            DependsOnTargets="$(ZipFilesDependsOn)"
            Condition="'@(Zip)' != ''"
            Inputs="$(MSBuildAllProjects);@(Zip)"
            Outputs="$(IntermediateOutputPath)$(OutputName)$(TargetExt);$(ZipOutput)"
            >

        <Delete Files="$(IntermediateOutputPath)$(OutputName)$(TargetExt)"
                ContinueOnError="true"
                Condition="Exists('$(IntermediateOutputPath)$(OutputName)$(TargetExt)')"/>

        <Message Text="Build_Status Zipping: $(OutputName)$(TargetExt)"/>

        <Zip 
            Files="@(Zip)"
            Action="Add"
            UsePathInZipFile="$(ZipUsePathInZip)" 
            ZipFile="$(IntermediateOutputPath)$(OutputName)$(TargetExt)">
            <Output  TaskParameter="ZipFile"
                ItemName="IntermediateZipFile"/>
        </Zip>

        <Copy
            SourceFiles="@(IntermediateZipFile)"
            DestinationFiles="$(ZipOutput)"
            OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" />

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** CreateProfiles -->
    <!-- ********************************************************************************************* -->
    <Target Name="CreateProfiles"            
            DependsOnTargets="$(CreateProfilesDependsOn)"
            Condition="'@(ProfileSources)' != ''"
            Inputs="$(MSBuildAllProjects);%(ProfileSources.Identity);%(IncludeFile);%(ProfileSources.Baseline)"
            Outputs="$(OutputPath)%(DestFolder)\%(ProfileSources.Filename)%(ProfileSources.Extension)"
            >
        <Message Text="Building %(ProfileSources.Filename)%(ProfileSources.Extension)" />
        <Delete Files="$(OutputPath)%(ProfileSources.DestFolder)\%(ProfileSources.Filename)%(ProfileSources.Extension)"
                ContinueOnError="true" />
        <MakeDir ContinueOnError="true" Directories="$(OutputPath)%(ProfileSources.DestFolder)" />
        <Copy ContinueOnError="true" SourceFiles="%(ProfileSources.Identity)" DestinationFiles="%(ProfileSources.MergeFile)" OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" />
        <Exec IgnoreExitCode="true" Command="$(WlcCommand) -m %(ProfileSources.IncludeFile) %(ProfileSources.MergeFile) -guidlist $(DevDivToolsPath)\wlctoolwindows.txt"
              StandardOutputImportance="Normal"/>
        <Exec Condition="%(ProfileSources.MergeProfiles) == true" IgnoreExitCode="true" Command="$(ProfilesMergeCommand) -b %(ProfileSources.Baseline) -m %(ProfileSources.MergeFile) -o $(OutputPath)%(DestFolder)\%(ProfileSources.Filename)%(ProfileSources.Extension)"
              StandardOutputImportance="Normal" />
        <Message Condition="!Exists('$(OutputPath)%(DestFolder)\%(ProfileSources.Filename)%(ProfileSources.Extension)')" Text="General.vssettings : error : Unable to build $(OutputPath)%(DestFolder)\%(ProfileSources.Filename)%(ProfileSources.Extension)" />

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** OverlayProfiles -->
    <!-- ********************************************************************************************* -->
    <Target Name="OverlayProfiles"            
            DependsOnTargets="$(OverlayProfilesDependsOn)"
            Condition="'@(ProfileOverlays)' != ''"
            Inputs="$(MSBuildAllProjects);%(ProfileOverlays.Identity);%(ProfileOverlays.BaselineFolder)\%(ProfileOverlays.BaselineFile)"
            Outputs="%(ProfileOverlays.DestFolder)\%(ProfileOverlays.BaselineFile)"
            >
        <Message Text="Overlaying %(ProfileOverlays.Identity) on %(ProfileOverlays.BaselineFolder)\%(ProfileOverlays.BaselineFile)" />
        <Delete Files="%(ProfileOverlays.DestFolder)\%(ProfileOverlays.BaselineFile)"
                ContinueOnError="true" />
        <MakeDir ContinueOnError="true" Directories="%(ProfileOverlays.DestFolder)" />
        <Exec IgnoreExitCode="true" Command="$(ProfilesMergeCommand) -b %(ProfileOverlays.BaselineFolder)\%(ProfileOverlays.BaselineFile) -m %(ProfileOverlays.Identity) -o %(ProfileOverlays.DestFolder)\%(ProfileOverlays.BaselineFile)"
              StandardOutputImportance="Normal" />
        <Message Condition="!Exists('%(ProfileOverlays.DestFolder)\%(ProfileOverlays.BaselineFile)')" Text="error : Unable to build %(ProfileOverlays.DestFolder)\%(ProfileOverlays.BaselineFile)" />

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Default Manifest Creation -->
    <!-- *** Creates the .mt.iden file -->
    <!-- ********************************************************************************************* -->
    <Target Name="PreprocessDefaultManifest"            
            Inputs="$(MSBuildAllProjects);@(Internal_DefaultManifestIdentityFile)"
            Outputs="$(LinkManifestNameIden)"
            DependsOnTargets="$(PreprocessDefaultManifestDependsOn)"
            Condition="'$(LinkGenerateManifest)' == 'true' and '$(GenerateStandaloneManifest)' != 'true' and Exists('$(LinkManifestName)')">

        <Exec
            Command="$(MtPreprocessorCommand) -o $(LinkManifestNameIden) -i @(Internal_DefaultManifestIdentityFile) -DAPPLICATION_NAME=\&quot;$(OutputName)\&quot; $(PreprocessDefaultManifestAdditionalOptions)" 
            StandardOutputImportance="Normal"/>

    </Target>

    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Manifest preprocessing -->
    <!-- ********************************************************************************************* -->
    <Target Name="PreprocessManifest"            
            Inputs="$(MSBuildAllProjects);$(ManifestFileName)"
            Outputs="$(OutputPath)$(ManifestFileName)"
            DependsOnTargets="$(PreprocessManifestDependsOn)"
            Condition="'$(GenerateStandaloneManifest)' == 'true' and '$(ManifestFileName)' != ''">

        <Exec
            Command="$(MtPreprocessorCommand) -o $(IntermediateOutputRelativePath)\$(ManifestFileName) -i $(ManifestFileName) -DAPPLICATION_NAME=\&quot;$(OutputName)\&quot; $(PreprocessManifestAdditionalOptions)" 
            StandardOutputImportance="Normal"/>

        <Exec
            Condition="'%(PreprocessManifest.RunValidator)' != 'false'"
            Command="$(MtValidatorCommand) /b /s:$(MtValidatorSchema) /m:$(IntermediateOutputRelativePath)\$(ManifestFileName)"
            StandardOutputImportance="Normal"/>

        <Copy SourceFiles="$(IntermediateOutputRelativePath)\$(ManifestFileName)"
              DestinationFiles="$(OutputPath)$(ManifestFileName)" 
              OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" />

    </Target>

    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Manifest Creation -->
    <!-- *** Creates the .mt file -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <GenerateManifestDependsOn>
            PreprocessDefaultManifest;
            PreprocessManifest;
        </GenerateManifestDependsOn>
    </PropertyGroup>

    <Target Name="GenerateManifest"       
            DependsOnTargets="$(GenerateManifestDependsOn)"
            Condition="('$(LinkGenerateManifest)' == 'true' or '$(GenerateStandaloneManifest)' == 'true')">

        <Exec
            Command="$(MtCommand) -nologo -outputresource:$(LinkOutputFile);$(LinkManifestResourceId) -manifest $(LinkManifestName) $(AdditionalManifests) $(LinkManifestNameIden)"
            StandardOutputImportance="Normal"
            Condition="'$(GenerateStandaloneManifest)' != 'true' and Exists('$(LinkManifestName)')"
            />

        <Exec
            Command="$(MtCommand) -nologo -out:$(OutputPath)$(ManifestFileName) -manifest $(LinkManifestName) $(OutputPath)$(ManifestFileName) $(AdditionalManifests)"
            StandardOutputImportance="Normal"
            Condition="'$(GenerateStandaloneManifest)' == 'true' and '$(ManifestFileName)' != '' and Exists('$(LinkManifestName)')"
            />

        <Error Text="You must specify ManifestFileName together with GenerateStandaloneManifest."
               Condition="'$(ManifestFileName)' == '' and '$(GenerateStandaloneManifest)' == 'true'" />

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** Resource Compilation -->
    <!-- ********************************************************************************************* -->
    <Target Name="ResourceCompile"
            DependsOnTargets="$(ResourceCompileDependsOn)"
            Condition=" '@(RCResourceFile)' != '' ">

        <RC 
            AdditionalIncludeDirectories="$(IntermediateOutputRelativePath);$(UserIncludes);$(CrtIncPath);$(AtlIncPath);$(SdkIncPath);$(SdkIncInternalPath);$(DevDivSdkIncPath);$(DdkIncPath);$(VSCommonIncPath);$(IntermediateOutputDirectory);$(OakIncPath);$(VCSdkIncPath)"
            AdditionalOptions="$(RCAdditionalOptions)"
            Culture="$(RCCulture)"
            IntermediateDirectory="$(IntermediateOutputDirectory)"
            MinimalRebuildFromTracking="$(Internal_MinimalRebuildFromTracking)" 
            PreprocessorDefinitions="$(RCPreprocessorDefinitions)"
            ResourceOutputFileName="@(RCResourceFile->'$(RCIntermediateOutputDirectory)%(Filename).res')"
            Source="%(RCResourceFile.Identity)"
            ToolPath="$(RCToolPath)"
            TrackFileAccess="$(TrackFileAccess)"
            UndefinePreprocessorDefinitions="$(RcUndefines)"
        />
    </Target>

    <Target Name="UIDllResourceCompile"
            DependsOnTargets="$(UIDllResourceCompileDependsOn)"
            Condition=" '@(UIDllRCResourceFile)' != '' ">

        <RC 
            AdditionalIncludeDirectories="$(IntermediateOutputRelativePath);$(UserIncludes);$(CrtIncPath);$(AtlIncPath);$(SdkIncPath);$(SdkIncInternalPath);$(DevDivSdkIncPath);$(DdkIncPath);$(VSCommonIncPath);$(IntermediateOutputDirectory);$(OakIncPath);$(VCSdkIncPath)"
            AdditionalOptions="$(RCAdditionalOptions)"
            Culture="$(RCCulture)"
            IntermediateDirectory="$(IntermediateOutputDirectory)"
            MinimalRebuildFromTracking="$(Internal_MinimalRebuildFromTracking)" 
            PreprocessorDefinitions="$(RCPreprocessorDefinitions)"
            ResourceOutputFileName="@(UIDllRCResourceFile->'$(RCIntermediateOutputDirectory)%(Filename).res')"
            Source="%(UIDllRCResourceFile.Identity)"
            ToolPath="$(RCToolPath)"
            TrackFileAccess="$(TrackFileAccess)"
        >
            <Output TaskParameter="ResourceOutputFileName"
                    ItemName="CompiledResourceForUIDll"
                    Condition="'%(UIDllRCResourceFile.IncludeInLink)' != 'false'"/>
        </RC>
    </Target>
    <!-- ********************************************************************************************* -->


    <!-- ********************************************************************************************* -->
    <!-- *** Resource Link -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <UIDllLinkDependsOn/>
    </PropertyGroup>

    <Target Name="UIDllLink"
            Inputs="$(MSBuildAllProjects);@(CompiledResourceForUIDll)"
            Outputs="$(OutputUIPath)\$(OutputUIName)$(OutputUIExt)"
            DependsOnTargets="$(UIDllLinkDependsOn)"
            Condition="'$(GenerateUIDll)' != 'false' and '@(UIDllRCResourceFile)' != ''">

        <GetBaseAddress BaseAddressFile="$(Internal_DllBaseLookupFile)"
                        BinaryName="$(OutputUIName)"
                        DefaultBaseAddress="$(DefaultBaseAddress)"
                        ContinueOnError="true">
            <Output  TaskParameter="BaseAddress"
                    PropertyName="RCBaseAddress"/>
        </GetBaseAddress>

        <MakeDir
      Directories="$(OutputUIPath)"/>

        <Link 
            AdditionalOptions="$(RCLinkAdditionalOptions)"
            BaseAddress="$(RCBaseAddress)"
            IgnoreAllDefaultLibraries="true" 
            LinkDLL="true"
            OperatingSystemVersion="$(LinkOSVersion)"
            OutputFile="$(OutputUIPath)\$(OutputUIName)$(OutputUIExt)"
            ProgramDatabasePath="NONE"   
            ResourceOnlyDLL="true"
            SafeExceptionHandlers="$(LinkSafeSeh)" 
            SetChecksum="$(LinkRelease)" 
            Sources="@(CompiledResourceForUIDll)"
            SubSystem="$(LinkSubSystem),$(Internal_SubsystemVer)"
            TargetMachine="$(LinkLibMachineType)"
            ToolExe="$(LinkToolExe)"
            ToolPath="$(LinkToolPath)"
            Version="$(LinkAppVersion)" 
            WarnAsError="$(LinkWarningsAsErrors)" 
        />

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- ***  GenerateIntermediateAssemblyFromAssemblyAttributes -->
    <!-- ***  Creates an assembly from preprocessor output and native resource -->
    <!-- ********************************************************************************************* -->
    <ItemGroup>
        <Clean Include="@(Internal_AssemblyAttributePreprocessOutput->'$(IntermediateOutputRelativePath)\%(Filename).dll')"/>
    </ItemGroup>

    <Target Name="GenerateIntermediateAssemblyFromAssemblyAttributes"
           DependsOnTargets="$(GenerateIntermediateAssemblyFromAssemblyAttributesDependsOn)"
           Inputs="$(MSBuildAllProjects);@(Internal_AssemblyAttributePreprocessOutput);@(NativeResource)"
           Outputs="@(Internal_AssemblyAttributePreprocessOutput->'$(IntermediateOutputRelativePath)\%(Filename).dll')"
           Condition="'@(Internal_AssemblyAttributePreprocessOutput)@(NativeResource)' != ''">

        <Csc Sources="@(Internal_AssemblyAttributePreprocessOutput)"
             TargetType="library"
             DisabledWarnings="@(Internal_NoWarn)"
             Win32Resource="@(NativeResource)"
             ToolPath="$(CscToolPath)"
             OutputAssembly="@(Internal_AssemblyAttributePreprocessOutput->'$(IntermediateOutputRelativePath)\%(Filename).dll')">
            
            <Output TaskParameter="OutputAssembly" ItemName="AssemblyAttributesAssembly"/>
        </Csc>
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- ***  GenerateIntermediateAssemblyFromTlb -->
    <!-- ***  Creates an assembly from a .tlb -->
    <!-- ********************************************************************************************* -->
    <ItemGroup>
        <Clean Include="$(IntermediateOutputRelativePath)\$(OutputName).dll" Condition="'$(OutputName)' != ''"/>
    </ItemGroup>

    <Target Name="GenerateIntermediateAssemblyFromTlb"
           DependsOnTargets="$(GenerateIntermediateAssemblyFromTlbDependsOn)"
           Inputs="$(MSBuildAllProjects);@(IdlTypeLibrary)"
           Outputs="$(IntermediateOutputRelativePath)\$(OutputName).dll"
           Condition="'@(IdlTypeLibrary)' != ''">

        <Exec Command="$(TlbImpCommand) $(TlbImportFlags) /strictref:nopia @(IdlTypeLibrary) /out:$(IntermediateOutputRelativePath)\$(OutputName).dll" 
              StandardOutputImportance="Normal"
              Outputs="$(IntermediateOutputRelativePath)\$(OutputName).dll">
            <Output TaskParameter="Outputs" ItemName="TlbAssembly"/>
        </Exec>
    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- ***  DisassembleForTlbAssembly -->
    <!-- ***  Creates .il from assemblies -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <DisassembleForTlbAssemblyDependsOn>
            GenerateIntermediateAssemblyFromAssemblyAttributes;
            GenerateIntermediateAssemblyFromTlb;
        </DisassembleForTlbAssemblyDependsOn>
    </PropertyGroup>

    <ItemGroup>
        <Clean Include="@(TlbAssembly->'$(IntermediateOutputRelativePath)\%(FileName).il')"/>
        <Clean Include="@(AssemblyAttributesAssembly->'$(IntermediateOutputRelativePath)\%(FileName).il')"/>
    </ItemGroup>

    <Target Name="DisassembleForTlbAssembly"
           Inputs="$(MSBuildAllProjects);@(TlbAssembly);@(AssemblyAttributesAssembly)"
           Outputs="@(TlbAssembly->'$(IntermediateOutputRelativePath)\%(FileName).il');
                    @(AssemblyAttributesAssembly->'$(IntermediateOutputRelativePath)\%(FileName).il')"
           DependsOnTargets="$(DisassembleForTlbAssemblyDependsOn)"
           Condition="'@(TlbAssembly)@(AssemblyAttributesAssembly)' != ''">

        <!-- Condition for partial target execution (from TLDA) -->
        <Exec Command="$(IlDasmCommand) /nobar /out=$(IntermediateOutputRelativePath)\%(TlbAssembly.FileName).il %(TlbAssembly.Identity)" 
              StandardOutputImportance="Normal"
              Outputs="$(IntermediateOutputRelativePath)\%(TlbAssembly.FileName).il"
              Condition="'@(TlbAssembly)' != ''">
            <Output TaskParameter="Outputs" ItemName="TlbAssemblyIl"/>
        </Exec>

        <!-- Condition for partial target execution (from TLDA) -->
        <Exec Command="$(IlDasmCommand) /nobar /out=$(IntermediateOutputRelativePath)\%(AssemblyAttributesAssembly.FileName).il %(AssemblyAttributesAssembly.Identity)" 
              StandardOutputImportance="Normal"        
              Outputs="$(IntermediateOutputRelativePath)\%(AssemblyAttributesAssembly.FileName).il"
              Condition="'@(AssemblyAttributesAssembly)' != ''">
            <Output TaskParameter="Outputs" ItemName="AssemblyAttributesAssemblyIl"/>
        </Exec>

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** GenerateAssemblyFromTlb -->
    <!-- *** Merges .il from tlbimp, assemblyattributes, and native resource, then assembles it -->
    <!-- ********************************************************************************************* -->
    <PropertyGroup>
        <GenerateAssemblyFromTlbDependsOn>
            DisassembleForTlbAssembly;
        </GenerateAssemblyFromTlbDependsOn>
    </PropertyGroup>

    <ItemGroup>
        <Clean Include="$(OutputPath)\$(OutputName)$(TargetExt)" Condition="'$(OutputName)' != ''"/>
        <Clean Include="$(IntermediateOutputRelativePath)\$(OutputName).merged.il" Condition="'$(OutputName)' != ''"/>
    </ItemGroup>

    <Target Name="GenerateAssemblyFromTlb"
          DependsOnTargets="$(GenerateAssemblyFromTlbDependsOn)"
          Inputs="$(MSBuildAllProjects);@(TlbAssemblyIl);@(AssemblyAttributesAssemblyIl);@(RCResourceFile->'$(RCIntermediateOutputDirectory)%(Filename).res')"
          Outputs="$(OutputPath)\$(OutputName)$(TargetExt)"
          Condition="'@(TlbAssemblyIl)@(AssemblyAttributesAssemblyIl)@(RCResourceFile->'$(RCIntermediateOutputDirectory)%(Filename).res')' != ''">

        <GetBaseAddress BaseAddressFile="$(CoffBaseTxtFile)"
                        BinaryName="$(TargetFileName)"
                        DefaultBaseAddress="$(DefaultBaseAddress)">
            <Output   TaskParameter="BaseAddress"
                      PropertyName="IlasmBaseAddress"/>
        </GetBaseAddress>

        <!-- Ordering of .il files is important -->
        <Exec Command="$(MergeAttributesCommand) @(TlbAssemblyIl) @(AssemblyAttributesAssemblyIl) /out $(IntermediateOutputRelativePath)\$(OutputName).merged.il"
              StandardOutputImportance="Normal"
              Outputs="$(IntermediateOutputRelativePath)\$(OutputName).merged.il">
            <Output TaskParameter="Outputs" ItemName="MergedIl"/>
        </Exec>

        <PropertyGroup>
            <IlAsmFlags>$(IlAsmFlags) /DLL /quiet /INCLUDE=$(DevDivToolsPath)</IlAsmFlags>
            <IlAsmFlags Condition="'$(DebugBuild)' == 'true'">$(IlAsmFlags) /debug</IlAsmFlags>
            <IlAsmFlags Condition="'$(DebugBuild)' != 'true'">$(IlAsmFlags) /pdb</IlAsmFlags>
        </PropertyGroup>        
        
        <Exec Command="$(IlAsmCommand) $(IlAsmFlags) /BASE=$(IlasmBaseAddress) @(RCResourceFile->'/res:$(RCIntermediateOutputDirectory)%(Filename).res', ' ') /out=$(OutputPath)\$(OutputName)$(TargetExt) @(MergedIl)"
              StandardOutputImportance="Normal"/>

    </Target>
    <!-- ********************************************************************************************* -->

    <!-- ********************************************************************************************* -->
    <!-- *** PlaceSymbols Target -->
    <!-- ********************************************************************************************* -->
    <Target Name="PlaceSymbols"
          DependsOnTargets="$(PlaceSymbolsDependsOn)"
          Inputs="$(MSBuildAllProjects);@(Internal_ProgramDataBaseFileName)" 
          Outputs="@(Internal_ProgramDataBaseFileName->'$(SymbolsPriPath)\%(Filename)%(Extension)')" 
          Condition="'$(BinplaceSymbols)' == 'true' and '$(LinkResourceOnlyDll)' != 'true' and Exists('@(Internal_ProgramDataBaseFileName)')">

        <!-- If no placefile was specified, merge the standard placefil.txt's to create one -->
        <WriteLinesToFile 
            File="$(IntermediateOutputRelativePath)\placefil.txt"
            Lines="%(Internal_LinkOutputFile.Filename)%(Internal_LinkOutputFile.Extension) ."
            Overwrite="false"
            Condition="'$(BinplacePlacefile)' == ''"/>

        <Exec Command="merge_placefiles $(ToolsPath)\placefil.txt $(DevDivToolsPath)\placefil.txt $(IntermediateOutputRelativePath)\placefil.txt $(IntermediateOutputRelativePath)\placefil.txt" 
              StandardOutputImportance="Normal"
              Outputs="$(IntermediateOutputRelativePath)\placefil.txt"
              Condition="'$(BinplacePlacefile)' == ''">
            <Output PropertyName="BinplacePlacefile" TaskParameter="Outputs"/>
        </Exec>

        <!-- We normally link directly into the output directory. If we try and binplace there binplace
             will not run because it thinks the binary is up to date. But we need binplace to run in order
             to strip and copy the symbols files. So we binplace to a temporary location to force it to run,
             then move the binary to the final location.-->
        <Exec Command="binplace -R $(IntermediateOutputPath)\TempPlacing -S $(BinariesDirectory)\Symbols -n $(BinariesDirectory)\Symbols.pri -P $(BinplacePlacefile) -xa -:WARN $(LinkOutputFile)" 
              StandardOutputImportance="Normal"
              Condition="'$(BinplaceRoot)'==''"/>

        <Move SourceFiles="@(Internal_LinkOutputFile->'$(IntermediateOutputPath)\TempPlacing\%(Filename)%(Extension)')"
              DestinationFiles="$(LinkOutputFile)"
              Condition="'$(BinplaceRoot)'==''"/>
              
        <!-- When another location is specified, we assume this isn't necessary -->
        <Exec Command="binplace -R $(BinplaceRoot) -S $(BinariesDirectory)\Symbols -n $(BinariesDirectory)\Symbols.pri -P $(BinplacePlacefile) -xa -:WARN $(LinkOutputFile)" 
              StandardOutputImportance="Normal"
              Condition="'$(BinplaceRoot)'!=''"/>              

    </Target>

    <!-- 
    ============================================================
                                        BeforeClean
    Redefine this target in your project in order to run tasks just before Clean
    ============================================================
    -->
    <Target Name="BeforeClean"/>

    <!-- 
    ============================================================
                                        BeforeBuildGenerated
    Redefine this target in your project in order to run tasks just before BuildGenerated
    ============================================================
    -->
    <Target Name="BeforeBuildGenerated"/>

    <!-- 
    ============================================================
                                        BeforeBuildCompiled
    Redefine this target in your project in order to run tasks just before BuildCompiled
    ============================================================
    -->
     <Target Name="BeforeBuildCompiled"/>

    <!-- 
    ============================================================
                                        BeforeBuildLinked
    Redefine this target in your project in order to run tasks just before BuildLinked
    ============================================================
    -->
    <Target Name="BeforeBuildLinked"/>

    <!-- 
    ============================================================
                                        AfterClean
    Redefine this target in your project in order to run tasks just after Clean
    ============================================================
    -->
    <Target Name="AfterClean"/>

    <!-- 
    ============================================================
                                        AfterBuildGenerated
    Redefine this target in your project in order to run tasks just after BuildGenerated
    ============================================================
    -->
    <Target Name="AfterBuildGenerated"/>

    <!-- 
    ============================================================
                                        AfterBuildCompiled
    Redefine this target in your project in order to run tasks just after BuildCompiled
    ============================================================
    -->
    <Target Name="AfterBuildCompiled"/>

    <!-- 
    ============================================================
                                        AfterBuildLinked
    Redefine this target in your project in order to run tasks just after BuildLinked
    ============================================================
    -->
    <Target Name="AfterBuildLinked"/>

</Project>
